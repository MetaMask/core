{"version":3,"file":"NotificationController.js","sourceRoot":"","sources":["../../src/notification/NotificationController.ts"],"names":[],"mappings":";;;AAAA,sDAA0E;AA4C1E,MAAM,YAAY,GAAG;IACnB,aAAa,EAAE,EAAE;CAClB,CAAC;AAEF;;GAEG;AACH,MAAa,sBAAuB,SAAQ,+BAG3C;IACC;;;;;OAKG;IACH,YAAY,MAA0B,EAAE,KAAyB;QAC/D,KAAK,CAAC,MAAM,EAAE,KAAK,IAAI,YAAY,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACK,iBAAiB;QACvB,MAAM,gBAAgB,GAAyB,EAAE,CAAC;QAClD,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CACrC,CAAC,YAA+B,EAAE,EAAE;YAClC,gBAAgB,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAC1D,YAAY,CAAC,EAAE,CAChB;gBACC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC3C,CAAC,iCACM,YAAY,KACf,OAAO,EAAE,KAAK,GACf,CAAC;QACR,CAAC,CACF,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,SAA6B;QACxC,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QAEpD,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACnD,kBAAkB,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,kBAAkB,EAAE,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;CACF;AAtDD,wDAsDC","sourcesContent":["import { BaseController, BaseConfig, BaseState } from '../BaseController';\n\ninterface viewedNotification {\n  [id: number]: boolean;\n}\n\ninterface Notification {\n  id: number;\n  date: string;\n}\n\ninterface StateNotification extends Notification {\n  isShown: boolean;\n}\n\n/**\n * A map of notification ids to Notification objects\n */\ninterface NotificationMap {\n  [id: number]: Notification;\n}\n\n/**\n * A map of notification ids to StateNotification objects\n */\nexport interface StateNotificationMap {\n  [id: number]: StateNotification;\n}\n\n/**\n * NotitificationConfig will hold the active notifications\n */\nexport interface NotificationConfig extends BaseConfig {\n  allNotifications: NotificationMap;\n}\n\n/**\n * Notification state will hold all the seen and unseen notifications\n * that are still active\n */\nexport interface NotificationState extends BaseState {\n  notifications: StateNotificationMap;\n}\n\nconst defaultState = {\n  notifications: {},\n};\n\n/**\n * Controller for managing in-app announcement notifications.\n */\nexport class NotificationController extends BaseController<\n  NotificationConfig,\n  NotificationState\n> {\n  /**\n   * Creates a NotificationController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config: NotificationConfig, state?: NotificationState) {\n    super(config, state || defaultState);\n    this.initialize();\n    this._addNotifications();\n  }\n\n  /**\n   * Compares the notifications in state with the notifications from file\n   * to check if there are any new notifications/announcements\n   * if yes, the new notification will be added to the state with a flag indicating\n   * that the notification is not seen by the user.\n   */\n  private _addNotifications(): void {\n    const newNotifications: StateNotificationMap = {};\n    const { allNotifications } = this.config;\n    Object.values(allNotifications).forEach(\n      (notification: StateNotification) => {\n        newNotifications[notification.id] = this.state.notifications[\n          notification.id\n        ]\n          ? this.state.notifications[notification.id]\n          : {\n              ...notification,\n              isShown: false,\n            };\n      },\n    );\n    this.update({ notifications: newNotifications });\n  }\n\n  /**\n   * Updates the status of the status of the specified notifications\n   * once it is read by the user.\n   *\n   * @param viewedIds - The notification IDs to mark as viewed.\n   */\n  updateViewed(viewedIds: viewedNotification): void {\n    const stateNotifications = this.state.notifications;\n\n    for (const id of Object.keys(viewedIds).map(Number)) {\n      stateNotifications[id].isShown = viewedIds[id];\n    }\n    this.update({ notifications: stateNotifications }, true);\n  }\n}\n"]}