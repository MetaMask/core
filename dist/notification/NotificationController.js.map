{"version":3,"file":"NotificationController.js","sourceRoot":"","sources":["../../src/notification/NotificationController.ts"],"names":[],"mappings":";;;AACA,mCAAgC;AAEhC,kCAAsC;AACtC,0DAAqD;AA4BrD,MAAM,IAAI,GAAG,wBAAwB,CAAC;AAyCtC,MAAM,QAAQ,GAAG;IACf,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACnD,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,aAAa,EAAE,EAAE;CAClB,CAAC;AAEF;;GAEG;AACH,MAAa,sBAAuB,SAAQ,iCAI3C;IACC;;;;;;OAMG;IACH,YAAY,EACV,SAAS,EACT,KAAK,GAIN;QACC,KAAK,CAAC;YACJ,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,KAAK,kCAAO,YAAY,GAAK,KAAK,CAAE;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,IAAI,OAAgB,EACvB,CAAC,MAAc,EAAE,OAAe,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAChE,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,IAAI,UAAmB,EAC1B,CAAC,GAAa,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CACrC,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,IAAI,WAAoB,EAC3B,CAAC,GAAa,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CACtC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,MAAc,EAAE,OAAe;QAClC,MAAM,EAAE,GAAG,IAAA,eAAM,GAAE,CAAC;QACpB,MAAM,YAAY,GAAG;YACnB,EAAE;YACF,MAAM;YACN,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;YACvB,QAAQ,EAAE,IAAI;YACd,OAAO;SACR,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,GAAa;QACnB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;gBACpB,IAAI,IAAA,kBAAW,EAAC,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE;oBACxC,OAAO,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;iBAChC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,GAAa;QACpB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;gBACpB,IAAI,IAAA,kBAAW,EAAC,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE;oBACxC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;iBAC/C;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA3FD,wDA2FC","sourcesContent":["import type { Patch } from 'immer';\nimport { nanoid } from 'nanoid';\n\nimport { hasProperty } from '../util';\nimport { BaseController } from '../BaseControllerV2';\n\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\n\n/**\n * @typedef NotificationControllerState\n * @property notifications - Stores existing notifications to be shown in the UI\n */\nexport type NotificationControllerState = {\n  notifications: Record<string, Notification>;\n};\n\n/**\n * @typedef Notification - Stores information about in-app notifications, to be shown in the UI\n * @property id - A UUID that identifies the notification\n * @property origin - The origin that requested the notification\n * @property createdDate - The notification creation date in milliseconds elapsed since the UNIX epoch\n * @property readDate - The notification read date in milliseconds elapsed since the UNIX epoch or null if unread\n * @property message - The notification message\n */\nexport type Notification = {\n  id: string;\n  origin: string;\n  createdDate: number;\n  readDate: number | null;\n  message: string;\n};\n\nconst name = 'NotificationController';\n\nexport type NotificationControllerStateChange = {\n  type: `${typeof name}:stateChange`;\n  payload: [NotificationControllerState, Patch[]];\n};\n\nexport type GetNotificationControllerState = {\n  type: `${typeof name}:getState`;\n  handler: () => NotificationControllerState;\n};\n\nexport type ShowNotification = {\n  type: `${typeof name}:show`;\n  handler: NotificationController['show'];\n};\n\nexport type DismissNotification = {\n  type: `${typeof name}:dismiss`;\n  handler: NotificationController['dismiss'];\n};\n\nexport type MarkNotificationRead = {\n  type: `${typeof name}:markRead`;\n  handler: NotificationController['markRead'];\n};\n\nexport type NotificationControllerActions =\n  | GetNotificationControllerState\n  | ShowNotification\n  | DismissNotification\n  | MarkNotificationRead;\n\nexport type NotificationControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  NotificationControllerActions,\n  NotificationControllerStateChange,\n  never,\n  never\n>;\n\nconst metadata = {\n  notifications: { persist: true, anonymous: false },\n};\n\nconst defaultState = {\n  notifications: {},\n};\n\n/**\n * Controller that handles storing notifications and showing them to the user\n */\nexport class NotificationController extends BaseController<\n  typeof name,\n  NotificationControllerState,\n  NotificationControllerMessenger\n> {\n  /**\n   * Creates a NotificationController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: NotificationControllerMessenger;\n    state?: Partial<NotificationControllerState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:show` as const,\n      (origin: string, message: string) => this.show(origin, message),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:dismiss` as const,\n      (ids: string[]) => this.dismiss(ids),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:markRead` as const,\n      (ids: string[]) => this.markRead(ids),\n    );\n  }\n\n  /**\n   * Shows a notification.\n   *\n   * @param origin - The origin trying to send a notification\n   * @param message - A message to show on the notification\n   */\n  show(origin: string, message: string) {\n    const id = nanoid();\n    const notification = {\n      id,\n      origin,\n      createdDate: Date.now(),\n      readDate: null,\n      message,\n    };\n    this.update((state) => {\n      state.notifications[id] = notification;\n    });\n  }\n\n  /**\n   * Dimisses a list of notifications.\n   *\n   * @param ids - A list of notification IDs\n   */\n  dismiss(ids: string[]) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (hasProperty(state.notifications, id)) {\n          delete state.notifications[id];\n        }\n      }\n    });\n  }\n\n  /**\n   * Marks a list of notifications as read.\n   *\n   * @param ids - A list of notification IDs\n   */\n  markRead(ids: string[]) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (hasProperty(state.notifications, id)) {\n          state.notifications[id].readDate = Date.now();\n        }\n      }\n    });\n  }\n}\n"]}