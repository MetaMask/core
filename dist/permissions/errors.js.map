{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/permissions/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { errorCodes, ethErrors, EthereumRpcError } from 'eth-rpc-errors';\n\ntype UnauthorizedArg = {\n  data?: Record<string, unknown>;\n};\n\n/**\n * Utility function for building an \"unauthorized\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function unauthorized(opts: UnauthorizedArg) {\n  return ethErrors.provider.unauthorized({\n    message:\n      'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',\n    data: opts.data,\n  });\n}\n\n/**\n * Utility function for building a \"method not found\" error.\n *\n * @param method - The method in question.\n * @param data - Optional data for context.\n * @returns The built error\n */\nexport function methodNotFound(method: string, data?: unknown) {\n  const message = `The method \"${method}\" does not exist / is not available.`;\n\n  const opts: Parameters<typeof ethErrors.rpc.methodNotFound>[0] = { message };\n  if (data !== undefined) {\n    opts.data = data;\n  }\n  return ethErrors.rpc.methodNotFound(opts);\n}\n\ntype InvalidParamsArg = {\n  message?: string;\n  data?: unknown;\n};\n\n/**\n * Utility function for building an \"invalid params\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function invalidParams(opts: InvalidParamsArg) {\n  return ethErrors.rpc.invalidParams({\n    data: opts.data,\n    message: opts.message,\n  });\n}\n\n/**\n * Utility function for building an \"user rejected request\" error.\n *\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function userRejectedRequest<Data extends Record<string, unknown>>(\n  data?: Data,\n): EthereumRpcError<Data> {\n  return ethErrors.provider.userRejectedRequest({ data });\n}\n\n/**\n * Utility function for building an internal error.\n *\n * @param message - The error message\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function internalError<Data extends Record<string, unknown>>(\n  message: string,\n  data?: Data,\n): EthereumRpcError<Data> {\n  return ethErrors.rpc.internal({ message, data });\n}\n\nexport class InvalidSubjectIdentifierError extends Error {\n  constructor(origin: unknown) {\n    super(\n      `Invalid subject identifier: \"${\n        typeof origin === 'string' ? origin : typeof origin\n      }\"`,\n    );\n  }\n}\n\nexport class UnrecognizedSubjectError extends Error {\n  constructor(origin: string) {\n    super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n  }\n}\n\nexport class InvalidApprovedPermissionError extends Error {\n  public data: {\n    origin: string;\n    target: string;\n    approvedPermission: Record<string, unknown>;\n  };\n\n  constructor(\n    origin: string,\n    target: string,\n    approvedPermission: Record<string, unknown>,\n  ) {\n    super(\n      `Invalid approved permission for origin \"${origin}\" and target \"${target}\".`,\n    );\n    this.data = { origin, target, approvedPermission };\n  }\n}\nexport class PermissionDoesNotExistError extends Error {\n  constructor(origin: string, target: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n  }\n}\n\nexport class EndowmentPermissionDoesNotExistError extends Error {\n  public data?: { origin: string };\n\n  constructor(target: string, origin?: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n    if (origin) {\n      this.data = { origin };\n    }\n  }\n}\n\nexport class UnrecognizedCaveatTypeError extends Error {\n  public data: {\n    caveatType: string;\n    origin?: string;\n    target?: string;\n  };\n\n  constructor(caveatType: string);\n\n  constructor(caveatType: string, origin: string, target: string);\n\n  constructor(caveatType: string, origin?: string, target?: string) {\n    super(`Unrecognized caveat type: \"${caveatType}\"`);\n    this.data = { caveatType };\n    if (origin !== undefined) {\n      this.data.origin = origin;\n    }\n\n    if (target !== undefined) {\n      this.data.target = target;\n    }\n  }\n}\n\nexport class InvalidCaveatsPropertyError extends Error {\n  public data: { origin: string; target: string; caveatsProperty: unknown };\n\n  constructor(origin: string, target: string, caveatsProperty: unknown) {\n    super(\n      `The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`,\n    );\n    this.data = { origin, target, caveatsProperty };\n  }\n}\n\nexport class CaveatDoesNotExistError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class CaveatAlreadyExistsError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class InvalidCaveatError extends EthereumRpcError<unknown> {\n  public override data: { origin: string; target: string };\n\n  constructor(receivedCaveat: unknown, origin: string, target: string) {\n    super(\n      errorCodes.rpc.invalidParams,\n      `Invalid caveat. Caveats must be plain objects.`,\n      { receivedCaveat },\n    );\n    this.data = { origin, target };\n  }\n}\n\nexport class InvalidCaveatTypeError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatMissingValueError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat is missing \"value\" field.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatInvalidJsonError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat \"value\" is invalid JSON.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class InvalidCaveatFieldsError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(\n      `Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`,\n    );\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class ForbiddenCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class DuplicateCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class PermissionsRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Permissions request with id \"${id}\" not found.`);\n  }\n}\n"]}