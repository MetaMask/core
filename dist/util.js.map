{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addHexPrefix,\n  isValidAddress,\n  isHexString,\n  bufferToHex,\n  BN,\n  toChecksumAddress,\n  stripHexPrefix,\n} from 'ethereumjs-util';\nimport { fromWei, toWei } from 'ethjs-unit';\nimport { ethErrors } from 'eth-rpc-errors';\nimport ensNamehash from 'eth-ens-namehash';\nimport { TYPED_MESSAGE_SCHEMA, typedSignatureHash } from 'eth-sig-util';\nimport { validate } from 'jsonschema';\nimport { CID } from 'multiformats/cid';\nimport deepEqual from 'fast-deep-equal';\nimport {\n  Transaction,\n  FetchAllOptions,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from './transaction/TransactionController';\nimport { MessageParams } from './message-manager/MessageManager';\nimport { PersonalMessageParams } from './message-manager/PersonalMessageManager';\nimport { TypedMessageParams } from './message-manager/TypedMessageManager';\nimport { Token } from './assets/TokenRatesController';\nimport { MAINNET, GANACHE_CHAIN_ID } from './constants';\nimport { Json } from './BaseControllerV2';\n\nconst TIMEOUT_ERROR = new Error('timeout');\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n};\n\n/**\n * Converts a BN object to a hex string with a '0x' prefix.\n *\n * @param inputBn - BN instance to convert to a hex string.\n * @returns A '0x'-prefixed hex string.\n */\nexport function BNToHex(inputBn: any) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\n/**\n * Used to multiply a BN by a fraction.\n *\n * @param targetBN - Number to multiply by a fraction.\n * @param numerator - Numerator of the fraction multiplier.\n * @param denominator - Denominator of the fraction multiplier.\n * @returns Product of the multiplication.\n */\nexport function fractionBN(\n  targetBN: any,\n  numerator: number | string,\n  denominator: number | string,\n) {\n  const numBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numBN).div(denomBN);\n}\n\n/**\n * Used to convert a base-10 number from GWEI to WEI. Can handle numbers with decimal parts.\n *\n * @param n - The base 10 number to convert to WEI.\n * @returns The number in WEI, as a BN.\n */\nexport function gweiDecToWEIBN(n: number | string) {\n  if (Number.isNaN(n)) {\n    return new BN(0);\n  }\n\n  const parts = n.toString().split('.');\n  const wholePart = parts[0] || '0';\n  let decimalPart = parts[1] || '';\n\n  if (!decimalPart) {\n    return toWei(wholePart, 'gwei');\n  }\n\n  if (decimalPart.length <= 9) {\n    return toWei(`${wholePart}.${decimalPart}`, 'gwei');\n  }\n\n  const decimalPartToRemove = decimalPart.slice(9);\n  const decimalRoundingDigit = decimalPartToRemove[0];\n\n  decimalPart = decimalPart.slice(0, 9);\n  let wei = toWei(`${wholePart}.${decimalPart}`, 'gwei');\n\n  if (Number(decimalRoundingDigit) >= 5) {\n    wei = wei.add(new BN(1));\n  }\n\n  return wei;\n}\n\n/**\n * Used to convert values from wei hex format to dec gwei format.\n *\n * @param hex - The value in hex wei.\n * @returns The value in dec gwei as string.\n */\nexport function weiHexToGweiDec(hex: string) {\n  const hexWei = new BN(stripHexPrefix(hex), 16);\n  return fromWei(hexWei, 'gwei').toString(10);\n}\n\n/**\n * Return a URL that can be used to obtain ETH for a given network.\n *\n * @param networkCode - Network code of desired network.\n * @param address - Address to deposit obtained ETH.\n * @param amount - How much ETH is desired.\n * @returns URL to buy ETH based on network.\n */\nexport function getBuyURL(\n  networkCode = '1',\n  address?: string,\n  amount = 5,\n): string | undefined {\n  switch (networkCode) {\n    case '1':\n      return `https://buy.coinbase.com/?code=9ec56d01-7e81-5017-930c-513daa27bb6a&amount=${amount}&address=${address}&crypto_currency=ETH`;\n    case '3':\n      return 'https://faucet.metamask.io/';\n    case '4':\n      return 'https://www.rinkeby.io/';\n    case '5':\n      return 'https://goerli-faucet.slock.it/';\n    case '42':\n      return 'https://github.com/kovan-testnet/faucet';\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Return a URL that can be used to fetch ETH transactions.\n *\n * @param networkType - Network type of desired network.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to fetch the access the endpoint.\n */\nexport function getEtherscanApiUrl(\n  networkType: string,\n  urlParams: any,\n): string {\n  let etherscanSubdomain = 'api';\n  if (networkType !== MAINNET) {\n    etherscanSubdomain = `api-${networkType}`;\n  }\n  const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n  let url = `${apiUrl}/api?`;\n\n  for (const paramKey in urlParams) {\n    if (urlParams[paramKey]) {\n      url += `${paramKey}=${urlParams[paramKey]}&`;\n    }\n  }\n  url += 'tag=latest&page=1';\n  return url;\n}\n\n/**\n * Handles the fetch of incoming transactions.\n *\n * @param networkType - Network type of desired network.\n * @param address - Address to get the transactions from.\n * @param txHistoryLimit - The maximum number of transactions to fetch.\n * @param opt - Object that can contain fromBlock and Etherscan service API key.\n * @returns Responses for both ETH and ERC20 token transactions.\n */\nexport async function handleTransactionFetch(\n  networkType: string,\n  address: string,\n  txHistoryLimit: number,\n  opt?: FetchAllOptions,\n): Promise<[{ [result: string]: [] }, { [result: string]: [] }]> {\n  // transactions\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: opt?.fromBlock,\n    apikey: opt?.etherscanApiKey,\n    offset: txHistoryLimit.toString(),\n    order: 'desc',\n  };\n  const etherscanTxUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'txlist',\n  });\n  const etherscanTxResponsePromise = handleFetch(etherscanTxUrl);\n\n  // tokens\n  const etherscanTokenUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'tokentx',\n  });\n  const etherscanTokenResponsePromise = handleFetch(etherscanTokenUrl);\n\n  let [etherscanTxResponse, etherscanTokenResponse] = await Promise.all([\n    etherscanTxResponsePromise,\n    etherscanTokenResponsePromise,\n  ]);\n\n  if (\n    etherscanTxResponse.status === '0' ||\n    etherscanTxResponse.result.length <= 0\n  ) {\n    etherscanTxResponse = { status: etherscanTxResponse.status, result: [] };\n  }\n\n  if (\n    etherscanTokenResponse.status === '0' ||\n    etherscanTokenResponse.result.length <= 0\n  ) {\n    etherscanTokenResponse = {\n      status: etherscanTokenResponse.status,\n      result: [],\n    };\n  }\n\n  return [etherscanTxResponse, etherscanTokenResponse];\n}\n\n/**\n * Converts a hex string to a BN object.\n *\n * @param inputHex - Number represented as a hex string.\n * @returns A BN instance.\n */\nexport function hexToBN(inputHex: string) {\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\n/**\n * A helper function that converts hex data to human readable string.\n *\n * @param hex - The hex string to convert to string.\n * @returns A human readable string conversion.\n */\nexport function hexToText(hex: string) {\n  try {\n    const stripped = stripHexPrefix(hex);\n    const buff = Buffer.from(stripped, 'hex');\n    return buff.toString('utf8');\n  } catch (e) {\n    /* istanbul ignore next */\n    return hex;\n  }\n}\n\n/**\n * Parses a hex string and converts it into a number that can be operated on in a bignum-safe,\n * base-10 way.\n *\n * @param value - A base-16 number encoded as a string.\n * @returns The number as a BN object in base-16 mode.\n */\nexport function fromHex(value: string | BN): BN {\n  if (BN.isBN(value)) {\n    return value;\n  }\n  return new BN(hexToBN(value).toString(10));\n}\n\n/**\n * Converts an integer to a hexadecimal representation.\n *\n * @param value - An integer, an integer encoded as a base-10 string, or a BN.\n * @returns The integer encoded as a hex string.\n */\nexport function toHex(value: number | string | BN): string {\n  if (typeof value === 'string' && isHexString(value)) {\n    return value;\n  }\n  const hexString = BN.isBN(value)\n    ? value.toString(16)\n    : new BN(value.toString(), 10).toString(16);\n  return `0x${hexString}`;\n}\n\n/**\n * Normalizes properties on a Transaction object.\n *\n * @param transaction - Transaction object to normalize.\n * @returns Normalized Transaction object.\n */\nexport function normalizeTransaction(transaction: Transaction) {\n  const normalizedTransaction: Transaction = { from: '' };\n  let key: keyof Transaction;\n  for (key in NORMALIZERS) {\n    if (transaction[key as keyof Transaction]) {\n      normalizedTransaction[key] = NORMALIZERS[key](transaction[key]) as never;\n    }\n  }\n  return normalizedTransaction;\n}\n\n/**\n * Execute and return an asynchronous operation without throwing errors.\n *\n * @param operation - Function returning a Promise.\n * @param logError - Determines if the error should be logged.\n * @returns Promise resolving to the result of the async operation.\n */\nexport async function safelyExecute(\n  operation: () => Promise<any>,\n  logError = false,\n) {\n  try {\n    return await operation();\n  } catch (error: any) {\n    /* istanbul ignore next */\n    if (logError) {\n      console.error(error);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Execute and return an asynchronous operation with a timeout.\n *\n * @param operation - Function returning a Promise.\n * @param logError - Determines if the error should be logged.\n * @param timeout - Timeout to fail the operation.\n * @returns Promise resolving to the result of the async operation.\n */\nexport async function safelyExecuteWithTimeout(\n  operation: () => Promise<any>,\n  logError = false,\n  timeout = 500,\n) {\n  try {\n    return await Promise.race([\n      operation(),\n      new Promise<void>((_, reject) =>\n        setTimeout(() => {\n          reject(TIMEOUT_ERROR);\n        }, timeout),\n      ),\n    ]);\n  } catch (error) {\n    /* istanbul ignore next */\n    if (logError) {\n      console.error(error);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Convert an address to a checksummed hexidecimal address.\n *\n * @param address - The address to convert.\n * @returns A 0x-prefixed hexidecimal checksummed address.\n */\nexport function toChecksumHexAddress(address: string) {\n  const hexPrefixed = addHexPrefix(address);\n  if (!isHexString(hexPrefixed)) {\n    // Version 5.1 of ethereumjs-utils would have returned '0xY' for input 'y'\n    // but we shouldn't waste effort trying to change case on a clearly invalid\n    // string. Instead just return the hex prefixed original string which most\n    // closely mimics the original behavior.\n    return hexPrefixed;\n  }\n  return toChecksumAddress(hexPrefixed);\n}\n\n/**\n * Validates that the input is a hex address. This utility method is a thin\n * wrapper around ethereumjs-util.isValidAddress, with the exception that it\n * does not throw an error when provided values that are not hex strings. In\n * addition, and by default, this method will return true for hex strings that\n * meet the length requirement of a hex address, but are not prefixed with `0x`\n * Finally, if the mixedCaseUseChecksum flag is true and a mixed case string is\n * provided this method will validate it has the proper checksum formatting.\n *\n * @param possibleAddress - Input parameter to check against.\n * @param options - The validation options.\n * @param options.allowNonPrefixed - If true will first ensure '0x' is prepended to the string.\n * @returns Whether or not the input is a valid hex address.\n */\nexport function isValidHexAddress(\n  possibleAddress: string,\n  { allowNonPrefixed = true } = {},\n) {\n  const addressToCheck = allowNonPrefixed\n    ? addHexPrefix(possibleAddress)\n    : possibleAddress;\n  if (!isHexString(addressToCheck)) {\n    return false;\n  }\n\n  return isValidAddress(addressToCheck);\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate.\n */\nexport function validateTransaction(transaction: Transaction) {\n  if (\n    !transaction.from ||\n    typeof transaction.from !== 'string' ||\n    !isValidHexAddress(transaction.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${transaction.from} must be a valid string.`,\n    );\n  }\n\n  if (transaction.to === '0x' || transaction.to === undefined) {\n    if (transaction.data) {\n      delete transaction.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n      );\n    }\n  } else if (\n    transaction.to !== undefined &&\n    !isValidHexAddress(transaction.to)\n  ) {\n    throw new Error(\n      `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n    );\n  }\n\n  if (transaction.value !== undefined) {\n    const value = transaction.value.toString();\n    if (value.includes('-')) {\n      throw new Error(`Invalid \"value\": ${value} is not a positive number.`);\n    }\n\n    if (value.includes('.')) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(transaction.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * A helper function that converts rawmessageData buffer data to a hex, or just returns the data if\n * it is already formatted as a hex.\n *\n * @param data - The buffer data to convert to a hex.\n * @returns A hex string conversion of the buffer data.\n */\nexport function normalizeMessageData(data: string) {\n  try {\n    const stripped = stripHexPrefix(data);\n    if (stripped.match(hexRe)) {\n      return addHexPrefix(stripped);\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n  }\n  return bufferToHex(Buffer.from(data, 'utf8'));\n}\n\n/**\n * Validates a PersonalMessageParams and MessageParams objects for required properties and throws in\n * the event of any validation error.\n *\n * @param messageData - PersonalMessageParams object to validate.\n */\nexport function validateSignMessageData(\n  messageData: PersonalMessageParams | MessageParams,\n) {\n  const { from, data } = messageData;\n  if (!from || typeof from !== 'string' || !isValidHexAddress(from)) {\n    throw new Error(`Invalid \"from\" address: ${from} must be a valid string.`);\n  }\n\n  if (!data || typeof data !== 'string') {\n    throw new Error(`Invalid message \"data\": ${data} must be a valid string.`);\n  }\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V1.\n *\n * @param messageData - TypedMessageParams object to validate.\n */\nexport function validateTypedSignMessageDataV1(\n  messageData: TypedMessageParams,\n) {\n  if (\n    !messageData.from ||\n    typeof messageData.from !== 'string' ||\n    !isValidHexAddress(messageData.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${messageData.from} must be a valid string.`,\n    );\n  }\n\n  if (!messageData.data || !Array.isArray(messageData.data)) {\n    throw new Error(\n      `Invalid message \"data\": ${messageData.data} must be a valid array.`,\n    );\n  }\n\n  try {\n    // typedSignatureHash will throw if the data is invalid.\n    typedSignatureHash(messageData.data as any);\n  } catch (e) {\n    throw new Error(`Expected EIP712 typed data.`);\n  }\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V3.\n *\n * @param messageData - TypedMessageParams object to validate.\n */\nexport function validateTypedSignMessageDataV3(\n  messageData: TypedMessageParams,\n) {\n  if (\n    !messageData.from ||\n    typeof messageData.from !== 'string' ||\n    !isValidHexAddress(messageData.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${messageData.from} must be a valid string.`,\n    );\n  }\n\n  if (!messageData.data || typeof messageData.data !== 'string') {\n    throw new Error(\n      `Invalid message \"data\": ${messageData.data} must be a valid array.`,\n    );\n  }\n  let data;\n  try {\n    data = JSON.parse(messageData.data);\n  } catch (e) {\n    throw new Error('Data must be passed as a valid JSON string.');\n  }\n  const validation = validate(data, TYPED_MESSAGE_SCHEMA);\n  if (validation.errors.length > 0) {\n    throw new Error(\n      'Data must conform to EIP-712 schema. See https://git.io/fNtcx.',\n    );\n  }\n}\n\n/**\n * Validates a ERC20 token to be added with EIP747.\n *\n * @param token - Token object to validate.\n */\nexport function validateTokenToWatch(token: Token) {\n  const { address, symbol, decimals } = token;\n  if (!address || !symbol || typeof decimals === 'undefined') {\n    throw ethErrors.rpc.invalidParams(\n      `Must specify address, symbol, and decimals.`,\n    );\n  }\n\n  if (typeof symbol !== 'string') {\n    throw ethErrors.rpc.invalidParams(`Invalid symbol: not a string.`);\n  }\n\n  if (symbol.length > 11) {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid symbol \"${symbol}\": longer than 11 characters.`,\n    );\n  }\n  const numDecimals = parseInt(decimals as unknown as string, 10);\n  if (isNaN(numDecimals) || numDecimals > 36 || numDecimals < 0) {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid decimals \"${decimals}\": must be 0 <= 36.`,\n    );\n  }\n\n  if (!isValidHexAddress(address)) {\n    throw ethErrors.rpc.invalidParams(`Invalid address \"${address}\".`);\n  }\n}\n\n/**\n * Returns whether the given code corresponds to a smart contract.\n *\n * @param code - The potential smart contract code.\n * @returns Whether the code was smart contract code or not.\n */\nexport function isSmartContractCode(code: string) {\n  /* istanbul ignore if */\n  if (!code) {\n    return false;\n  }\n  // Geth will return '0x', and ganache-core v2.2.1 will return '0x0'\n  const smartContractCode = code !== '0x' && code !== '0x0';\n  return smartContractCode;\n}\n\n/**\n * Execute fetch and verify that the response was successful.\n *\n * @param request - Request information.\n * @param options - Fetch options.\n * @returns The fetch response.\n */\nexport async function successfulFetch(request: string, options?: RequestInit) {\n  const response = await fetch(request, options);\n  if (!response.ok) {\n    throw new Error(\n      `Fetch failed with status '${response.status}' for request '${request}'`,\n    );\n  }\n  return response;\n}\n\n/**\n * Execute fetch and return object response.\n *\n * @param request - The request information.\n * @param options - The fetch options.\n * @returns The fetch response JSON data.\n */\nexport async function handleFetch(request: string, options?: RequestInit) {\n  const response = await successfulFetch(request, options);\n  const object = await response.json();\n  return object;\n}\n\n/**\n * Execute fetch and return object response, log if known error thrown, otherwise rethrow error.\n *\n * @param request - the request options object\n * @param request.url - The request url to query.\n * @param request.options - The fetch options.\n * @param request.timeout - Timeout to fail request\n * @param request.errorCodesToCatch - array of error codes for errors we want to catch in a particular context\n * @returns The fetch response JSON data or undefined (if error occurs).\n */\nexport async function fetchWithErrorHandling({\n  url,\n  options,\n  timeout,\n  errorCodesToCatch,\n}: {\n  url: string;\n  options?: RequestInit;\n  timeout?: number;\n  errorCodesToCatch?: number[];\n}) {\n  let result;\n  try {\n    if (timeout) {\n      result = Promise.race([\n        await handleFetch(url, options),\n        new Promise<Response>((_, reject) =>\n          setTimeout(() => {\n            reject(TIMEOUT_ERROR);\n          }, timeout),\n        ),\n      ]);\n    } else {\n      result = await handleFetch(url, options);\n    }\n  } catch (e) {\n    logOrRethrowError(e, errorCodesToCatch);\n  }\n  return result;\n}\n\n/**\n * Fetch that fails after timeout.\n *\n * @param url - Url to fetch.\n * @param options - Options to send with the request.\n * @param timeout - Timeout to fail request.\n * @returns Promise resolving the request.\n */\nexport async function timeoutFetch(\n  url: string,\n  options?: RequestInit,\n  timeout = 500,\n): Promise<Response> {\n  return Promise.race([\n    successfulFetch(url, options),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => {\n        reject(TIMEOUT_ERROR);\n      }, timeout),\n    ),\n  ]);\n}\n\n/**\n * Normalizes the given ENS name.\n *\n * @param ensName - The ENS name.\n * @returns The normalized ENS name string.\n */\nexport function normalizeEnsName(ensName: string): string | null {\n  if (ensName && typeof ensName === 'string') {\n    try {\n      const normalized = ensNamehash.normalize(ensName.trim());\n      // this regex is only sufficient with the above call to ensNamehash.normalize\n      // TODO: change 7 in regex to 3 when shorter ENS domains are live\n      if (normalized.match(/^(([\\w\\d-]+)\\.)*[\\w\\d-]{7,}\\.(eth|test)$/u)) {\n        return normalized;\n      }\n    } catch (_) {\n      // do nothing\n    }\n  }\n  return null;\n}\n\n/**\n * Wrapper method to handle EthQuery requests.\n *\n * @param ethQuery - EthQuery object initialized with a provider.\n * @param method - Method to request.\n * @param args - Arguments to send.\n * @returns Promise resolving the request.\n */\nexport function query(\n  ethQuery: any,\n  method: string,\n  args: any[] = [],\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const cb = (error: Error, result: any) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(result);\n    };\n\n    if (typeof ethQuery[method] === 'function') {\n      ethQuery[method](...args, cb);\n    } else {\n      ethQuery.sendAsync({ method, params: args }, cb);\n    }\n  });\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param transaction - Transaction object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport const isEIP1559Transaction = (transaction: Transaction): boolean => {\n  const hasOwnProp = (obj: Transaction, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(transaction, 'maxFeePerGas') &&\n    hasOwnProp(transaction, 'maxPriorityFeePerGas')\n  );\n};\n\n/**\n * Converts valid hex strings to decimal numbers, and handles unexpected arg types.\n *\n * @param value - a string that is either a hexadecimal with `0x` prefix or a decimal string.\n * @returns a decimal number.\n */\nexport const convertHexToDecimal = (\n  value: string | undefined = '0x0',\n): number => {\n  if (isHexString(value)) {\n    return parseInt(value, 16);\n  }\n\n  return Number(value) ? Number(value) : 0;\n};\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Removes IPFS protocol prefix from input string.\n *\n * @param ipfsUrl - An IPFS url (e.g. ipfs://{content id})\n * @returns IPFS content identifier and (possibly) path in a string\n * @throws Will throw if the url passed is not IPFS.\n */\nexport function removeIpfsProtocolPrefix(ipfsUrl: string) {\n  if (ipfsUrl.startsWith('ipfs://ipfs/')) {\n    return ipfsUrl.replace('ipfs://ipfs/', '');\n  } else if (ipfsUrl.startsWith('ipfs://')) {\n    return ipfsUrl.replace('ipfs://', '');\n  }\n  // this method should not be used with non-ipfs urls (i.e. startsWith('ipfs://') === true)\n  throw new Error('this method should not be used with non ipfs urls');\n}\n\n/**\n * Extracts content identifier and path from an input string.\n *\n * @param ipfsUrl - An IPFS URL minus the IPFS protocol prefix\n * @returns IFPS content identifier (cid) and sub path as string.\n * @throws Will throw if the url passed is not ipfs.\n */\nexport function getIpfsCIDv1AndPath(ipfsUrl: string): {\n  cid: string;\n  path?: string;\n} {\n  const url = removeIpfsProtocolPrefix(ipfsUrl);\n\n  // check if there is a path\n  // (CID is everything preceding first forward slash, path is everything after)\n  const index = url.indexOf('/');\n  const cid = index !== -1 ? url.substring(0, index) : url;\n  const path = index !== -1 ? url.substring(index) : undefined;\n\n  // We want to ensure that the CID is v1 (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats)\n  // because most cid v0s appear to be incompatible with IPFS subdomains\n  return {\n    cid: CID.parse(cid).toV1().toString(),\n    path,\n  };\n}\n\n/**\n * Adds URL protocol prefix to input URL string if missing.\n *\n * @param urlString - An IPFS URL.\n * @returns A URL with a https:// prepended.\n */\nexport function addUrlProtocolPrefix(urlString: string): string {\n  if (!urlString.match(/(^http:\\/\\/)|(^https:\\/\\/)/u)) {\n    return `https://${urlString}`;\n  }\n  return urlString;\n}\n\n/**\n * Formats URL correctly for use retrieving assets hosted on IPFS.\n *\n * @param ipfsGateway - The users preferred IPFS gateway (full URL or just host).\n * @param ipfsUrl - The IFPS URL pointed at the asset.\n * @param subdomainSupported - Boolean indicating whether the URL should be formatted with subdomains or not.\n * @returns A formatted URL, with the user's preferred IPFS gateway and format (subdomain or not), pointing to an asset hosted on IPFS.\n */\nexport function getFormattedIpfsUrl(\n  ipfsGateway: string,\n  ipfsUrl: string,\n  subdomainSupported: boolean,\n): string {\n  const { host, protocol, origin } = new URL(addUrlProtocolPrefix(ipfsGateway));\n  if (subdomainSupported) {\n    const { cid, path } = getIpfsCIDv1AndPath(ipfsUrl);\n    return `${protocol}//${cid}.ipfs.${host}${path ?? ''}`;\n  }\n  const cidAndPath = removeIpfsProtocolPrefix(ipfsUrl);\n  return `${origin}/ipfs/${cidAndPath}`;\n}\n\ntype PlainObject = Record<number | string | symbol, unknown>;\n\n/**\n * Determines whether a value is a \"plain\" object.\n *\n * @param value - A value to check\n * @returns True if the passed value is a plain object\n */\nexport function isPlainObject(value: unknown): value is PlainObject {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\n\nexport const hasProperty = (\n  object: PlainObject,\n  key: string | number | symbol,\n) => Reflect.hasOwnProperty.call(object, key);\n\n/**\n * Like {@link Array}, but always non-empty.\n *\n * @template T - The non-empty array member type.\n */\nexport type NonEmptyArray<T> = [T, ...T[]];\n\n/**\n * Type guard for {@link NonEmptyArray}.\n *\n * @template T - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nexport function isNonEmptyArray<T>(value: T[]): value is NonEmptyArray<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n\n/**\n * Type guard for {@link Json}.\n *\n * @param value - The value to check.\n * @returns Whether the value is valid JSON.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    return deepEqual(value, JSON.parse(JSON.stringify(value)));\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * Networks where token detection is supported - Values are in decimal format\n */\nexport enum SupportedTokenDetectionNetworks {\n  mainnet = '1',\n  bsc = '56',\n  polygon = '137',\n  avax = '43114',\n}\n\n/**\n * Check if token detection is enabled for certain networks.\n *\n * @param chainId - ChainID of network\n * @returns Whether the current network supports token detection\n */\nexport function isTokenDetectionSupportedForNetwork(chainId: string): boolean {\n  return Object.values<string>(SupportedTokenDetectionNetworks).includes(\n    chainId,\n  );\n}\n\n/**\n * Check if token list polling is enabled for a given network.\n * Currently this method is used to support e2e testing for consumers of this package.\n *\n * @param chainId - ChainID of network\n * @returns Whether the current network supports tokenlists\n */\nexport function isTokenListSupportedForNetwork(chainId: string): boolean {\n  const chainIdDecimal = convertHexToDecimal(chainId).toString();\n  return (\n    isTokenDetectionSupportedForNetwork(chainIdDecimal) ||\n    chainIdDecimal === GANACHE_CHAIN_ID\n  );\n}\n\n/**\n * Utility method to log if error is a common fetch error and otherwise rethrow it.\n *\n * @param error - Caught error that we should either rethrow or log to console\n * @param codesToCatch - array of error codes for errors we want to catch and log in a particular context\n */\nfunction logOrRethrowError(error: any, codesToCatch: number[] = []) {\n  if (!error) {\n    return;\n  }\n\n  const includesErrorCodeToCatch = codesToCatch.some((code) =>\n    error.message?.includes(`Fetch failed with status '${code}'`),\n  );\n\n  if (\n    error instanceof Error &&\n    (includesErrorCodeToCatch ||\n      error.message?.includes('Failed to fetch') ||\n      error === TIMEOUT_ERROR)\n  ) {\n    console.error(error);\n  } else {\n    throw error;\n  }\n}\n"]}