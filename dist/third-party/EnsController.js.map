{"version":3,"file":"EnsController.js","sourceRoot":"","sources":["../../src/third-party/EnsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport {\n  normalizeEnsName,\n  isValidHexAddress,\n  toChecksumHexAddress,\n} from '../util';\n\n/**\n * @type EnsEntry\n *\n * ENS entry representation\n * @property chainId - Id of the associated chain\n * @property ensName - The ENS name\n * @property address - Hex address with the ENS name, or null\n */\nexport interface EnsEntry {\n  chainId: string;\n  ensName: string;\n  address: string | null;\n}\n\n/**\n * @type EnsState\n *\n * ENS controller state\n * @property ensEntries - Object of ENS entry objects\n */\nexport interface EnsState extends BaseState {\n  ensEntries: { [chainId: string]: { [ensName: string]: EnsEntry } };\n}\n\n/**\n * Controller that manages a list ENS names and their resolved addresses\n * by chainId. A null address indicates an unresolved ENS name.\n */\nexport class EnsController extends BaseController<BaseConfig, EnsState> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'EnsController';\n\n  /**\n   * Creates an EnsController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config?: Partial<BaseConfig>, state?: Partial<EnsState>) {\n    super(config, state);\n\n    this.defaultState = { ensEntries: {} };\n\n    this.initialize();\n  }\n\n  /**\n   * Remove all chain Ids and ENS entries from state.\n   */\n  clear() {\n    this.update({ ensEntries: {} });\n  }\n\n  /**\n   * Delete an ENS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to delete.\n   * @param ensName - Name of the ENS entry to delete.\n   * @returns Boolean indicating if the entry was deleted.\n   */\n  delete(chainId: string, ensName: string): boolean {\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (\n      !normalizedEnsName ||\n      !this.state.ensEntries[chainId] ||\n      !this.state.ensEntries[chainId][normalizedEnsName]\n    ) {\n      return false;\n    }\n\n    const ensEntries = Object.assign({}, this.state.ensEntries);\n    delete ensEntries[chainId][normalizedEnsName];\n\n    if (Object.keys(ensEntries[chainId]).length === 0) {\n      delete ensEntries[chainId];\n    }\n\n    this.update({ ensEntries });\n    return true;\n  }\n\n  /**\n   * Retrieve a DNS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to retrieve.\n   * @param ensName - Name of the ENS entry to retrieve.\n   * @returns The EnsEntry or null if it does not exist.\n   */\n  get(chainId: string, ensName: string): EnsEntry | null {\n    const normalizedEnsName = normalizeEnsName(ensName);\n\n    // TODO Explicitly handle the case where `normalizedEnsName` is `null`\n    // eslint-disable-next-line no-implicit-coercion\n    return !!normalizedEnsName && this.state.ensEntries[chainId]\n      ? this.state.ensEntries[chainId][normalizedEnsName] || null\n      : null;\n  }\n\n  /**\n   * Add or update an ENS entry by chainId and ensName.\n   *\n   * A null address indicates that the ENS name does not resolve.\n   *\n   * @param chainId - Id of the associated chain.\n   * @param ensName - The ENS name.\n   * @param address - Associated address (or null) to add or update.\n   * @returns Boolean indicating if the entry was set.\n   */\n  set(chainId: string, ensName: string, address: string | null): boolean {\n    if (\n      !Number.isInteger(Number.parseInt(chainId, 10)) ||\n      !ensName ||\n      typeof ensName !== 'string' ||\n      (address && !isValidHexAddress(address))\n    ) {\n      throw new Error(\n        `Invalid ENS entry: { chainId:${chainId}, ensName:${ensName}, address:${address}}`,\n      );\n    }\n\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (!normalizedEnsName) {\n      throw new Error(`Invalid ENS name: ${ensName}`);\n    }\n\n    const normalizedAddress = address ? toChecksumHexAddress(address) : null;\n    const subState = this.state.ensEntries[chainId];\n\n    if (\n      subState?.[normalizedEnsName] &&\n      subState[normalizedEnsName].address === normalizedAddress\n    ) {\n      return false;\n    }\n\n    this.update({\n      ensEntries: {\n        ...this.state.ensEntries,\n        [chainId]: {\n          ...this.state.ensEntries[chainId],\n          [normalizedEnsName]: {\n            address: normalizedAddress,\n            chainId,\n            ensName: normalizedEnsName,\n          },\n        },\n      },\n    });\n    return true;\n  }\n}\n\nexport default EnsController;\n"]}