{"version":3,"file":"PhishingController.js","sourceRoot":"","sources":["../../src/third-party/PhishingController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toASCII } from 'punycode/';\nimport DEFAULT_PHISHING_RESPONSE from 'eth-phishing-detect/src/config.json';\nimport PhishingDetector from 'eth-phishing-detect/src/detector';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\n\n/**\n * @type EthPhishingResponse\n *\n * Configuration response from the eth-phishing-detect package\n * consisting of approved and unapproved website origins\n * @property blacklist - List of unapproved origins\n * @property fuzzylist - List of fuzzy-matched unapproved origins\n * @property tolerance - Fuzzy match tolerance level\n * @property version - Version number of this configuration\n * @property whitelist - List of approved origins\n */\nexport interface EthPhishingResponse {\n  blacklist: string[];\n  fuzzylist: string[];\n  tolerance: number;\n  version: number;\n  whitelist: string[];\n}\n\n/**\n * @type EthPhishingDetectConfig\n *\n * Interface defining expected input to PhishingDetector.\n * @property allowlist - List of approved origins (legacy naming \"whitelist\")\n * @property blocklist - List of unapproved origins (legacy naming \"blacklist\")\n * @property fuzzylist - List of fuzzy-matched unapproved origins\n * @property tolerance - Fuzzy match tolerance level\n */\nexport interface EthPhishingDetectConfig {\n  allowlist: string[];\n  blocklist: string[];\n  fuzzylist: string[];\n  tolerance: number;\n  name: string;\n  version: number;\n}\n\n/**\n * @type EthPhishingDetectResult\n *\n * Interface that describes the result of the `test` method.\n * @property name - Name of the config on which a match was found.\n * @property version - Version of the config on which a match was found.\n * @property result - Whether a domain was detected as a phishing domain. True means an unsafe domain.\n * @property match - The matching fuzzylist origin when a fuzzylist match is found. Returned as undefined for non-fuzzy true results.\n * @property type - The field of the config on which a match was found.\n */\nexport interface EthPhishingDetectResult {\n  name?: string;\n  version?: string;\n  result: boolean;\n  match?: string; // Returned as undefined for non-fuzzy true results.\n  type: 'all' | 'fuzzy' | 'blocklist' | 'allowlist';\n}\n\n/**\n * @type PhishingConfig\n *\n * Phishing controller configuration\n * @property interval - Polling interval used to fetch new block / approve lists\n */\nexport interface PhishingConfig extends BaseConfig {\n  interval: number;\n}\n\n/**\n * @type PhishingState\n *\n * Phishing controller state\n * @property phishing - eth-phishing-detect configuration\n * @property whitelist - array of temporarily-approved origins\n */\nexport interface PhishingState extends BaseState {\n  phishing: EthPhishingDetectConfig[];\n  whitelist: string[];\n}\n\n/**\n * Controller that passively polls on a set interval for approved and unapproved website origins\n */\nexport class PhishingController extends BaseController<\n  PhishingConfig,\n  PhishingState\n> {\n  private configUrlMetaMask =\n    'https://cdn.jsdelivr.net/gh/MetaMask/eth-phishing-detect@master/src/config.json';\n\n  private configUrlPhishFortHotlist = `https://cdn.jsdelivr.net/gh/phishfort/phishfort-lists@master/blacklists/hotlist.json`;\n\n  private detector: any;\n\n  private handle?: NodeJS.Timer;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'PhishingController';\n\n  /**\n   * Creates a PhishingController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    config?: Partial<PhishingConfig>,\n    state?: Partial<PhishingState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = { interval: 60 * 60 * 1000 };\n    this.defaultState = {\n      phishing: [\n        {\n          allowlist: (DEFAULT_PHISHING_RESPONSE as EthPhishingResponse)\n            .whitelist,\n          blocklist: (DEFAULT_PHISHING_RESPONSE as EthPhishingResponse)\n            .blacklist,\n          fuzzylist: (DEFAULT_PHISHING_RESPONSE as EthPhishingResponse)\n            .fuzzylist,\n          tolerance: (DEFAULT_PHISHING_RESPONSE as EthPhishingResponse)\n            .tolerance,\n          name: `MetaMask`,\n          version: (DEFAULT_PHISHING_RESPONSE as EthPhishingResponse).version,\n        },\n      ],\n      whitelist: [],\n    };\n    this.detector = new PhishingDetector(this.defaultState.phishing);\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new approval lists.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updatePhishingLists());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Determines if a given origin is unapproved.\n   *\n   * @param origin - Domain origin of a website.\n   * @returns Whether the origin is an unapproved origin.\n   */\n  test(origin: string): EthPhishingDetectResult {\n    const punycodeOrigin = toASCII(origin);\n    if (this.state.whitelist.indexOf(punycodeOrigin) !== -1) {\n      return { result: false, type: 'all' }; // Same as whitelisted match returned by detector.check(...).\n    }\n    return this.detector.check(punycodeOrigin);\n  }\n\n  /**\n   * Temporarily marks a given origin as approved.\n   *\n   * @param origin - The origin to mark as approved.\n   */\n  bypass(origin: string) {\n    const punycodeOrigin = toASCII(origin);\n    const { whitelist } = this.state;\n    if (whitelist.indexOf(punycodeOrigin) !== -1) {\n      return;\n    }\n    this.update({ whitelist: [...whitelist, punycodeOrigin] });\n  }\n\n  /**\n   * Updates lists of approved and unapproved website origins.\n   */\n  async updatePhishingLists() {\n    if (this.disabled) {\n      return;\n    }\n\n    const configs: EthPhishingDetectConfig[] = [];\n\n    const [metamaskConfigLegacy, phishfortHotlist] = await Promise.all([\n      await this.queryConfig<EthPhishingResponse>(this.configUrlMetaMask),\n      await this.queryConfig<string[]>(this.configUrlPhishFortHotlist),\n    ]);\n\n    // Correctly shaping MetaMask config.\n    const metamaskConfig: EthPhishingDetectConfig = {\n      allowlist: metamaskConfigLegacy ? metamaskConfigLegacy.whitelist : [],\n      blocklist: metamaskConfigLegacy ? metamaskConfigLegacy.blacklist : [],\n      fuzzylist: metamaskConfigLegacy ? metamaskConfigLegacy.fuzzylist : [],\n      tolerance: metamaskConfigLegacy ? metamaskConfigLegacy.tolerance : 0,\n      name: `MetaMask`,\n      version: metamaskConfigLegacy ? metamaskConfigLegacy.version : 0,\n    };\n    if (metamaskConfigLegacy) {\n      configs.push(metamaskConfig);\n    }\n\n    // Correctly shaping PhishFort config.\n    const phishfortConfig: EthPhishingDetectConfig = {\n      allowlist: [],\n      blocklist: (phishfortHotlist || []).filter(\n        (i) => !metamaskConfig.blocklist.includes(i),\n      ), // Removal of duplicates.\n      fuzzylist: [],\n      tolerance: 0,\n      name: `PhishFort`,\n      version: 1,\n    };\n    if (phishfortHotlist) {\n      configs.push(phishfortConfig);\n    }\n\n    // Do not update if all configs are unavailable.\n    if (!configs.length) {\n      return;\n    }\n\n    this.detector = new PhishingDetector(configs);\n    this.update({\n      phishing: configs,\n    });\n  }\n\n  private async queryConfig<ResponseType>(\n    input: RequestInfo,\n  ): Promise<ResponseType | null> {\n    const response = await fetch(input, { cache: 'no-cache' });\n\n    switch (response.status) {\n      case 200: {\n        return await response.json();\n      }\n\n      default: {\n        return null;\n      }\n    }\n  }\n}\n\nexport default PhishingController;\n"]}