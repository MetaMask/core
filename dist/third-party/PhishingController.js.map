{"version":3,"file":"PhishingController.js","sourceRoot":"","sources":["../../src/third-party/PhishingController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toASCII } from 'punycode/';\nimport DEFAULT_PHISHING_RESPONSE from 'eth-phishing-detect/src/config.json';\nimport PhishingDetector from 'eth-phishing-detect/src/detector';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\n\n/**\n * @type EthPhishingResponse\n *\n * Configuration response from the eth-phishing-detect package\n * consisting of approved and unapproved website origins\n * @property blacklist - List of unapproved origins\n * @property fuzzylist - List of fuzzy-matched unapproved origins\n * @property tolerance - Fuzzy match tolerance level\n * @property version - Version number of this configuration\n * @property whitelist - List of approved origins\n */\nexport interface EthPhishingResponse {\n  blacklist: string[];\n  fuzzylist: string[];\n  tolerance: number;\n  version: number;\n  whitelist: string[];\n}\n\n/**\n * @type PhishingConfig\n *\n * Phishing controller configuration\n * @property interval - Polling interval used to fetch new block / approve lists\n */\nexport interface PhishingConfig extends BaseConfig {\n  interval: number;\n}\n\n/**\n * @type PhishingState\n *\n * Phishing controller state\n * @property phishing - eth-phishing-detect configuration\n * @property whitelist - array of temporarily-approved origins\n */\nexport interface PhishingState extends BaseState {\n  phishing: EthPhishingResponse;\n  whitelist: string[];\n}\n\n/**\n * Controller that passively polls on a set interval for approved and unapproved website origins\n */\nexport class PhishingController extends BaseController<\n  PhishingConfig,\n  PhishingState\n> {\n  private configUrl =\n    'https://cdn.jsdelivr.net/gh/MetaMask/eth-phishing-detect@master/src/config.json';\n\n  private detector: any;\n\n  private handle?: NodeJS.Timer;\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'PhishingController';\n\n  /**\n   * Creates a PhishingController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    config?: Partial<PhishingConfig>,\n    state?: Partial<PhishingState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = { interval: 60 * 60 * 1000 };\n    this.defaultState = {\n      phishing: DEFAULT_PHISHING_RESPONSE,\n      whitelist: [],\n    };\n    this.detector = new PhishingDetector(this.defaultState.phishing);\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new approval lists.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updatePhishingLists());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Determines if a given origin is unapproved.\n   *\n   * @param origin - Domain origin of a website.\n   * @returns Whether the origin is an unapproved origin.\n   */\n  test(origin: string): boolean {\n    const punycodeOrigin = toASCII(origin);\n    if (this.state.whitelist.indexOf(punycodeOrigin) !== -1) {\n      return false;\n    }\n    return this.detector.check(punycodeOrigin).result;\n  }\n\n  /**\n   * Temporarily marks a given origin as approved.\n   *\n   * @param origin - The origin to mark as approved.\n   */\n  bypass(origin: string) {\n    const punycodeOrigin = toASCII(origin);\n    const { whitelist } = this.state;\n    if (whitelist.indexOf(punycodeOrigin) !== -1) {\n      return;\n    }\n    this.update({ whitelist: [...whitelist, punycodeOrigin] });\n  }\n\n  /**\n   * Updates lists of approved and unapproved website origins.\n   */\n  async updatePhishingLists() {\n    if (this.disabled) {\n      return;\n    }\n\n    const phishingOpts = await this.queryConfig(this.configUrl);\n    if (phishingOpts) {\n      this.detector = new PhishingDetector(phishingOpts);\n      this.update({\n        phishing: phishingOpts,\n      });\n    }\n  }\n\n  private async queryConfig(\n    input: RequestInfo,\n  ): Promise<EthPhishingResponse | null> {\n    const response = await fetch(input, { cache: 'no-cache' });\n\n    switch (response.status) {\n      case 200: {\n        return await response.json();\n      }\n      case 304:\n      case 403: {\n        return null;\n      }\n\n      default: {\n        throw new Error(\n          `Fetch failed with status '${response.status}' for request '${input}'`,\n        );\n      }\n    }\n  }\n}\n\nexport default PhishingController;\n"]}