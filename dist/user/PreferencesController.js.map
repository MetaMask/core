{"version":3,"file":"PreferencesController.js","sourceRoot":"","sources":["../../src/user/PreferencesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { toChecksumHexAddress } from '../util';\nimport { ContactEntry } from './AddressBookController';\n\n/**\n * Custom RPC network information\n *\n * @property rpcUrl - RPC target URL.\n * @property chainId - Network ID as per EIP-155\n * @property nickname - Personalized network name.\n * @property ticker - Currency ticker.\n * @property rpcPrefs - Personalized preferences.\n */\nexport interface FrequentRpc {\n  rpcUrl: string;\n  chainId?: number;\n  nickname?: string;\n  ticker?: string;\n  rpcPrefs?: RpcPreferences;\n}\n\n/**\n * Custom RPC network preferences\n *\n * @param blockExplorerUrl - Block explorer URL.\n */\nexport interface RpcPreferences {\n  blockExplorerUrl: string;\n}\n\n/**\n * @type PreferencesState\n *\n * Preferences controller state\n * @property featureFlags - Map of specific features to enable or disable\n * @property frequentRpcList - A list of custom RPCs to provide the user\n * @property identities - Map of addresses to ContactEntry objects\n * @property lostIdentities - Map of lost addresses to ContactEntry objects\n * @property selectedAddress - Current coinbase account\n */\nexport interface PreferencesState extends BaseState {\n  featureFlags: { [feature: string]: boolean };\n  frequentRpcList: FrequentRpc[];\n  ipfsGateway: string;\n  identities: { [address: string]: ContactEntry };\n  lostIdentities: { [address: string]: ContactEntry };\n  selectedAddress: string;\n  useTokenDetection: boolean;\n  useCollectibleDetection: boolean;\n  openSeaEnabled: boolean;\n}\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nexport class PreferencesController extends BaseController<\n  BaseConfig,\n  PreferencesState\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'PreferencesController';\n\n  /**\n   * Creates a PreferencesController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config?: Partial<BaseConfig>, state?: Partial<PreferencesState>) {\n    super(config, state);\n    this.defaultState = {\n      featureFlags: {},\n      frequentRpcList: [],\n      identities: {},\n      ipfsGateway: 'https://ipfs.io/ipfs/',\n      lostIdentities: {},\n      selectedAddress: '',\n      useTokenDetection: true,\n      useCollectibleDetection: false,\n      openSeaEnabled: false,\n    };\n    this.initialize();\n  }\n\n  /**\n   * Adds identities to state.\n   *\n   * @param addresses - List of addresses to use to generate new identities.\n   */\n  addIdentities(addresses: string[]) {\n    const { identities } = this.state;\n    addresses.forEach((address) => {\n      address = toChecksumHexAddress(address);\n      if (identities[address]) {\n        return;\n      }\n      const identityCount = Object.keys(identities).length;\n\n      identities[address] = {\n        name: `Account ${identityCount + 1}`,\n        address,\n        importTime: Date.now(),\n      };\n    });\n    this.update({ identities: { ...identities } });\n  }\n\n  /**\n   * Removes an identity from state.\n   *\n   * @param address - Address of the identity to remove.\n   */\n  removeIdentity(address: string) {\n    address = toChecksumHexAddress(address);\n    const { identities } = this.state;\n    if (!identities[address]) {\n      return;\n    }\n    delete identities[address];\n    this.update({ identities: { ...identities } });\n    if (address === this.state.selectedAddress) {\n      this.update({ selectedAddress: Object.keys(identities)[0] });\n    }\n  }\n\n  /**\n   * Associates a new label with an identity.\n   *\n   * @param address - Address of the identity to associate.\n   * @param label - New label to assign.\n   */\n  setAccountLabel(address: string, label: string) {\n    address = toChecksumHexAddress(address);\n    const { identities } = this.state;\n    identities[address] = identities[address] || {};\n    identities[address].name = label;\n    this.update({ identities: { ...identities } });\n  }\n\n  /**\n   * Enable or disable a specific feature flag.\n   *\n   * @param feature - Feature to toggle.\n   * @param activated - Value to assign.\n   */\n  setFeatureFlag(feature: string, activated: boolean) {\n    const oldFeatureFlags = this.state.featureFlags;\n    const featureFlags = { ...oldFeatureFlags, ...{ [feature]: activated } };\n    this.update({ featureFlags: { ...featureFlags } });\n  }\n\n  /**\n   * Synchronizes the current identity list with new identities.\n   *\n   * @param addresses - List of addresses corresponding to identities to sync.\n   * @returns Newly-selected address after syncing.\n   */\n  syncIdentities(addresses: string[]) {\n    addresses = addresses.map((address: string) =>\n      toChecksumHexAddress(address),\n    );\n    const { identities, lostIdentities } = this.state;\n    const newlyLost: { [address: string]: ContactEntry } = {};\n\n    for (const identity in identities) {\n      if (addresses.indexOf(identity) === -1) {\n        newlyLost[identity] = identities[identity];\n        delete identities[identity];\n      }\n    }\n\n    if (Object.keys(newlyLost).length > 0) {\n      for (const key in newlyLost) {\n        lostIdentities[key] = newlyLost[key];\n      }\n    }\n\n    this.update({\n      identities: { ...identities },\n      lostIdentities: { ...lostIdentities },\n    });\n    this.addIdentities(addresses);\n\n    if (addresses.indexOf(this.state.selectedAddress) === -1) {\n      this.update({ selectedAddress: addresses[0] });\n    }\n\n    return this.state.selectedAddress;\n  }\n\n  /**\n   * Generates and stores a new list of stored identities based on address. If the selected address\n   * is unset, or if it refers to an identity that was removed, it will be set to the first\n   * identity.\n   *\n   * @param addresses - List of addresses to use as a basis for each identity.\n   */\n  updateIdentities(addresses: string[]) {\n    addresses = addresses.map((address: string) =>\n      toChecksumHexAddress(address),\n    );\n    const oldIdentities = this.state.identities;\n    const identities = addresses.reduce(\n      (ids: { [address: string]: ContactEntry }, address, index) => {\n        ids[address] = oldIdentities[address] || {\n          address,\n          name: `Account ${index + 1}`,\n          importTime: Date.now(),\n        };\n        return ids;\n      },\n      {},\n    );\n    let { selectedAddress } = this.state;\n    if (!Object.keys(identities).includes(selectedAddress)) {\n      selectedAddress = Object.keys(identities)[0];\n    }\n    this.update({ identities: { ...identities }, selectedAddress });\n  }\n\n  /**\n   * Adds custom RPC URL to state.\n   *\n   * @param url - The custom RPC URL.\n   * @param chainId - The chain ID of the network, as per EIP-155.\n   * @param ticker - Currency ticker.\n   * @param nickname - Personalized network name.\n   * @param rpcPrefs - Personalized preferences.\n   */\n  addToFrequentRpcList(\n    url: string,\n    chainId?: number,\n    ticker?: string,\n    nickname?: string,\n    rpcPrefs?: RpcPreferences,\n  ) {\n    const { frequentRpcList } = this.state;\n    const index = frequentRpcList.findIndex(({ rpcUrl }) => {\n      return rpcUrl === url;\n    });\n    if (index !== -1) {\n      frequentRpcList.splice(index, 1);\n    }\n    const newFrequestRpc: FrequentRpc = {\n      rpcUrl: url,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    };\n    frequentRpcList.push(newFrequestRpc);\n    this.update({ frequentRpcList: [...frequentRpcList] });\n  }\n\n  /**\n   * Removes custom RPC URL from state.\n   *\n   * @param url - Custom RPC URL.\n   */\n  removeFromFrequentRpcList(url: string) {\n    const { frequentRpcList } = this.state;\n    const index = frequentRpcList.findIndex(({ rpcUrl }) => {\n      return rpcUrl === url;\n    });\n    if (index !== -1) {\n      frequentRpcList.splice(index, 1);\n    }\n    this.update({ frequentRpcList: [...frequentRpcList] });\n  }\n\n  /**\n   * Sets selected address.\n   *\n   * @param selectedAddress - Ethereum address.\n   */\n  setSelectedAddress(selectedAddress: string) {\n    this.update({ selectedAddress: toChecksumHexAddress(selectedAddress) });\n  }\n\n  /**\n   * Sets new IPFS gateway.\n   *\n   * @param ipfsGateway - IPFS gateway string.\n   */\n  setIpfsGateway(ipfsGateway: string) {\n    this.update({ ipfsGateway });\n  }\n\n  /**\n   * Toggle the token detection setting.\n   *\n   * @param useTokenDetection - Boolean indicating user preference on token detection.\n   */\n  setUseTokenDetection(useTokenDetection: boolean) {\n    this.update({ useTokenDetection });\n  }\n\n  /**\n   * Toggle the collectible detection setting.\n   *\n   * @param useCollectibleDetection - Boolean indicating user preference on collectible detection.\n   */\n  setUseCollectibleDetection(useCollectibleDetection: boolean) {\n    if (useCollectibleDetection && !this.state.openSeaEnabled) {\n      throw new Error(\n        'useCollectibleDetection cannot be enabled if openSeaEnabled is false',\n      );\n    }\n    this.update({ useCollectibleDetection });\n  }\n\n  /**\n   * Toggle the opensea enabled setting.\n   *\n   * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.\n   */\n  setOpenSeaEnabled(openSeaEnabled: boolean) {\n    this.update({ openSeaEnabled });\n    if (!openSeaEnabled) {\n      this.update({ useCollectibleDetection: false });\n    }\n  }\n}\n\nexport default PreferencesController;\n"]}