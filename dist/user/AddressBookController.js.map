{"version":3,"file":"AddressBookController.js","sourceRoot":"","sources":["../../src/user/AddressBookController.ts"],"names":[],"mappings":";;;AAAA,kCAIiB;AACjB,sDAA0E;AA4C1E;;GAEG;AACH,MAAa,qBAAsB,SAAQ,+BAG1C;IAMC;;;;;OAKG;IACH,YAAY,MAA4B,EAAE,KAAiC;QACzE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZvB;;WAEG;QACM,SAAI,GAAG,uBAAuB,CAAC;QAWtC,IAAI,CAAC,YAAY,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAExC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,OAAe,EAAE,OAAe;QACrC,OAAO,GAAG,IAAA,2BAAoB,EAAC,OAAO,CAAC,CAAC;QACxC,IACE,CAAC,IAAA,wBAAiB,EAAC,OAAO,CAAC;YAC3B,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;YAChC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACzC;YACA,OAAO,KAAK,CAAC;SACd;QAED,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC9D,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAClD,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACH,GAAG,CAAC,OAAe,EAAE,IAAY,EAAE,OAAO,GAAG,GAAG,EAAE,IAAI,GAAG,EAAE;QACzD,OAAO,GAAG,IAAA,2BAAoB,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,IAAA,wBAAiB,EAAC,OAAO,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,MAAM,KAAK,GAAG;YACZ,OAAO;YACP,OAAO;YACP,KAAK,EAAE,KAAK;YACZ,IAAI;YACJ,IAAI;SACL,CAAC;QAEF,MAAM,OAAO,GAAG,IAAA,uBAAgB,EAAC,IAAI,CAAC,CAAC;QACvC,IAAI,OAAO,EAAE;YACX,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACrB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;SACpB;QAED,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,kCACN,IAAI,CAAC,KAAK,CAAC,WAAW,KACzB,CAAC,OAAO,CAAC,kCACJ,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,KAClC,CAAC,OAAO,CAAC,EAAE,KAAK,MAEnB;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAnGD,sDAmGC;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import {\n  normalizeEnsName,\n  isValidHexAddress,\n  toChecksumHexAddress,\n} from '../util';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\n\n/**\n * @type ContactEntry\n *\n * ContactEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property importTime - Data time when an account as created/imported\n */\nexport interface ContactEntry {\n  address: string;\n  name: string;\n  importTime?: number;\n}\n\n/**\n * @type AddressBookEntry\n *\n * AddressBookEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property chainId - Chain id identifies the current chain\n * @property memo - User's note about address\n * @property isEns - is the entry an ENS name\n */\nexport interface AddressBookEntry {\n  address: string;\n  name: string;\n  chainId: string;\n  memo: string;\n  isEns: boolean;\n}\n\n/**\n * @type AddressBookState\n *\n * Address book controller state\n * @property addressBook - Array of contact entry objects\n */\nexport interface AddressBookState extends BaseState {\n  addressBook: { [chainId: string]: { [address: string]: AddressBookEntry } };\n}\n\n/**\n * Controller that manages a list of recipient addresses associated with nicknames\n */\nexport class AddressBookController extends BaseController<\n  BaseConfig,\n  AddressBookState\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AddressBookController';\n\n  /**\n   * Creates an AddressBookController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config?: Partial<BaseConfig>, state?: Partial<AddressBookState>) {\n    super(config, state);\n\n    this.defaultState = { addressBook: {} };\n\n    this.initialize();\n  }\n\n  /**\n   * Remove all contract entries.\n   */\n  clear() {\n    this.update({ addressBook: {} });\n  }\n\n  /**\n   * Remove a contract entry by address.\n   *\n   * @param chainId - Chain id identifies the current chain.\n   * @param address - Recipient address to delete.\n   * @returns Whether the entry was deleted.\n   */\n  delete(chainId: string, address: string) {\n    address = toChecksumHexAddress(address);\n    if (\n      !isValidHexAddress(address) ||\n      !this.state.addressBook[chainId] ||\n      !this.state.addressBook[chainId][address]\n    ) {\n      return false;\n    }\n\n    const addressBook = Object.assign({}, this.state.addressBook);\n    delete addressBook[chainId][address];\n\n    if (Object.keys(addressBook[chainId]).length === 0) {\n      delete addressBook[chainId];\n    }\n\n    this.update({ addressBook });\n    return true;\n  }\n\n  /**\n   * Add or update a contact entry by address.\n   *\n   * @param address - Recipient address to add or update.\n   * @param name - Nickname to associate with this address.\n   * @param chainId - Chain id identifies the current chain.\n   * @param memo - User's note about address.\n   * @returns Boolean indicating if the address was successfully set.\n   */\n  set(address: string, name: string, chainId = '1', memo = '') {\n    address = toChecksumHexAddress(address);\n    if (!isValidHexAddress(address)) {\n      return false;\n    }\n\n    const entry = {\n      address,\n      chainId,\n      isEns: false,\n      memo,\n      name,\n    };\n\n    const ensName = normalizeEnsName(name);\n    if (ensName) {\n      entry.name = ensName;\n      entry.isEns = true;\n    }\n\n    this.update({\n      addressBook: {\n        ...this.state.addressBook,\n        [chainId]: {\n          ...this.state.addressBook[chainId],\n          [address]: entry,\n        },\n      },\n    });\n\n    return true;\n  }\n}\n\nexport default AddressBookController;\n"]}