{"version":3,"file":"NetworkController.js","sourceRoot":"","sources":["../../src/network/NetworkController.ts"],"names":[],"mappings":"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","sourcesContent":["import EthQuery from 'eth-query';\nimport Subprovider from 'web3-provider-engine/subproviders/provider';\nimport createInfuraProvider from 'eth-json-rpc-infura/src/createProvider';\nimport createMetamaskProvider from 'web3-provider-engine/zero';\nimport { Mutex } from 'async-mutex';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { MAINNET, RPC } from '../constants';\n\n/**\n * Human-readable network name\n */\nexport type NetworkType =\n  | 'kovan'\n  | 'localhost'\n  | 'mainnet'\n  | 'rinkeby'\n  | 'goerli'\n  | 'ropsten'\n  | 'rpc'\n  | 'optimism'\n  | 'optimismTest';\n\nexport enum NetworksChainId {\n  mainnet = '1',\n  kovan = '42',\n  rinkeby = '4',\n  goerli = '5',\n  ropsten = '3',\n  localhost = '',\n  rpc = '',\n  optimism = '10',\n  optimismTest = '69',\n}\n\n/**\n * @type ProviderConfig\n *\n * Configuration passed to web3-provider-engine\n * @property rpcTarget - RPC target URL.\n * @property type - Human-readable network name.\n * @property chainId - Network ID as per EIP-155.\n * @property ticker - Currency ticker.\n * @property nickname - Personalized network name.\n */\nexport interface ProviderConfig {\n  rpcTarget?: string;\n  type: NetworkType;\n  chainId: string;\n  ticker?: string;\n  nickname?: string;\n}\n\nexport interface Block {\n  baseFeePerGas?: string;\n}\n\nexport interface NetworkProperties {\n  isEIP1559Compatible?: boolean;\n}\n\n/**\n * @type NetworkConfig\n *\n * Network controller configuration\n * @property infuraProjectId - an Infura project ID\n * @property providerConfig - web3-provider-engine configuration\n */\nexport interface NetworkConfig extends BaseConfig {\n  infuraProjectId?: string;\n  providerConfig: ProviderConfig;\n}\n\n/**\n * @type NetworkState\n *\n * Network controller state\n * @property network - Network ID as per net_version\n * @property isCustomNetwork - Identifies if the network is a custom network\n * @property provider - RPC URL and network name provider settings\n */\nexport interface NetworkState extends BaseState {\n  network: string;\n  isCustomNetwork: boolean;\n  provider: ProviderConfig;\n  properties: NetworkProperties;\n}\n\nconst LOCALHOST_RPC_URL = 'http://localhost:8545';\n\n/**\n * Controller that creates and manages an Ethereum network provider\n */\nexport class NetworkController extends BaseController<\n  NetworkConfig,\n  NetworkState\n> {\n  private ethQuery: any;\n\n  private internalProviderConfig: ProviderConfig = {} as ProviderConfig;\n\n  private mutex = new Mutex();\n\n  private initializeProvider(\n    type: NetworkType,\n    rpcTarget?: string,\n    chainId?: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    this.update({ isCustomNetwork: this.getIsCustomNetwork(chainId) });\n    switch (type) {\n      case 'kovan':\n      case MAINNET:\n      case 'rinkeby':\n      case 'goerli':\n      case 'optimism':\n      case 'optimismTest':\n      case 'ropsten':\n        this.setupInfuraProvider(type);\n        break;\n      case 'localhost':\n        this.setupStandardProvider(LOCALHOST_RPC_URL);\n        break;\n      case RPC:\n        rpcTarget &&\n          this.setupStandardProvider(rpcTarget, chainId, ticker, nickname);\n        break;\n      default:\n        throw new Error(`Unrecognized network type: '${type}'`);\n    }\n  }\n\n  private refreshNetwork() {\n    this.update({ network: 'loading', properties: {} });\n    const { rpcTarget, type, chainId, ticker } = this.state.provider;\n    this.initializeProvider(type, rpcTarget, chainId, ticker);\n    this.lookupNetwork();\n  }\n\n  private registerProvider() {\n    this.provider.on('error', this.verifyNetwork.bind(this));\n    this.ethQuery = new EthQuery(this.provider);\n  }\n\n  private setupInfuraProvider(type: NetworkType) {\n    const infuraProvider = createInfuraProvider({\n      network: type,\n      projectId: this.config.infuraProjectId,\n    });\n    const infuraSubprovider = new Subprovider(infuraProvider);\n    const config = {\n      ...this.internalProviderConfig,\n      ...{\n        dataSubprovider: infuraSubprovider,\n        engineParams: {\n          blockTrackerProvider: infuraProvider,\n          pollingInterval: 12000,\n        },\n      },\n    };\n    this.updateProvider(createMetamaskProvider(config));\n  }\n\n  private getIsCustomNetwork(chainId?: string) {\n    return (\n      chainId !== NetworksChainId.mainnet &&\n      chainId !== NetworksChainId.kovan &&\n      chainId !== NetworksChainId.rinkeby &&\n      chainId !== NetworksChainId.goerli &&\n      chainId !== NetworksChainId.ropsten &&\n      chainId !== NetworksChainId.localhost\n    );\n  }\n\n  private setupStandardProvider(\n    rpcTarget: string,\n    chainId?: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    const config = {\n      ...this.internalProviderConfig,\n      ...{\n        chainId,\n        engineParams: { pollingInterval: 12000 },\n        nickname,\n        rpcUrl: rpcTarget,\n        ticker,\n      },\n    };\n    this.updateProvider(createMetamaskProvider(config));\n  }\n\n  private updateProvider(provider: any) {\n    this.safelyStopProvider(this.provider);\n    this.provider = provider;\n    this.registerProvider();\n  }\n\n  private safelyStopProvider(provider: any) {\n    setTimeout(() => {\n      provider?.stop();\n    }, 500);\n  }\n\n  private verifyNetwork() {\n    this.state.network === 'loading' && this.lookupNetwork();\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'NetworkController';\n\n  /**\n   * Ethereum provider object for the current network\n   */\n  provider: any;\n\n  /**\n   * Creates a NetworkController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config?: Partial<NetworkConfig>, state?: Partial<NetworkState>) {\n    super(config, state);\n    this.defaultState = {\n      network: 'loading',\n      isCustomNetwork: false,\n      provider: { type: MAINNET, chainId: NetworksChainId.mainnet },\n      properties: { isEIP1559Compatible: false },\n    };\n    this.initialize();\n    this.getEIP1559Compatibility();\n  }\n\n  /**\n   * Sets a new configuration for web3-provider-engine.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param providerConfig - The web3-provider-engine configuration.\n   */\n  set providerConfig(providerConfig: ProviderConfig) {\n    this.internalProviderConfig = providerConfig;\n    const { type, rpcTarget, chainId, ticker, nickname } = this.state.provider;\n    this.initializeProvider(type, rpcTarget, chainId, ticker, nickname);\n    this.registerProvider();\n    this.lookupNetwork();\n  }\n\n  get providerConfig() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Refreshes the current network code.\n   */\n  async lookupNetwork() {\n    /* istanbul ignore if */\n    if (!this.ethQuery || !this.ethQuery.sendAsync) {\n      return;\n    }\n    const releaseLock = await this.mutex.acquire();\n    this.ethQuery.sendAsync(\n      { method: 'net_version' },\n      (error: Error, network: string) => {\n        this.update({\n          network: error ? /* istanbul ignore next*/ 'loading' : network,\n        });\n        releaseLock();\n      },\n    );\n  }\n\n  /**\n   * Convenience method to update provider network type settings.\n   *\n   * @param type - Human readable network name.\n   */\n  setProviderType(type: NetworkType) {\n    const {\n      rpcTarget,\n      chainId,\n      nickname,\n      ...providerState\n    } = this.state.provider;\n    this.update({\n      provider: {\n        ...providerState,\n        ...{ type, ticker: 'ETH', chainId: NetworksChainId[type] },\n      },\n    });\n    this.refreshNetwork();\n  }\n\n  /**\n   * Convenience method to update provider RPC settings.\n   *\n   * @param rpcTarget - The RPC endpoint URL.\n   * @param chainId - The chain ID as per EIP-155.\n   * @param ticker - The currency ticker.\n   * @param nickname - Personalized network name.\n   */\n  setRpcTarget(\n    rpcTarget: string,\n    chainId: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    this.update({\n      provider: {\n        ...this.state.provider,\n        ...{ type: RPC, ticker, rpcTarget, chainId, nickname },\n      },\n    });\n    this.refreshNetwork();\n  }\n\n  getEIP1559Compatibility() {\n    const { properties = {} } = this.state;\n\n    if (!properties.isEIP1559Compatible) {\n      if (typeof this.ethQuery?.sendAsync !== 'function') {\n        return Promise.resolve(true);\n      }\n      return new Promise((resolve, reject) => {\n        this.ethQuery.sendAsync(\n          { method: 'eth_getBlockByNumber', params: ['latest', false] },\n          (error: Error, block: Block) => {\n            if (error) {\n              reject(error);\n            } else {\n              const isEIP1559Compatible =\n                typeof block.baseFeePerGas !== 'undefined';\n              if (properties.isEIP1559Compatible !== isEIP1559Compatible) {\n                this.update({\n                  properties: {\n                    isEIP1559Compatible,\n                  },\n                });\n              }\n              resolve(isEIP1559Compatible);\n            }\n          },\n        );\n      });\n    }\n    return Promise.resolve(true);\n  }\n}\n\nexport default NetworkController;\n"]}