{"version":3,"file":"fetchLatestBlock.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/fetchLatestBlock.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA4C;AAG5C;;;;;;;GAOG;AACH,SAA8B,gBAAgB,CAC5C,QAAkB,EAClB,0BAA0B,GAAG,KAAK;;QAElC,MAAM,WAAW,GAAG,MAAM,IAAA,YAAK,EAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,MAAM,IAAA,YAAK,EAAC,QAAQ,EAAE,kBAAkB,EAAE;YACtD,WAAW;YACX,0BAA0B;SAC3B,CAAC,CAAC;QACH,uCACK,KAAK,KACR,MAAM,EAAE,IAAA,cAAO,EAAC,KAAK,CAAC,MAAM,CAAC,EAC7B,aAAa,EAAE,IAAA,cAAO,EAAC,KAAK,CAAC,aAAa,CAAC,IAC3C;IACJ,CAAC;CAAA;AAdD,mCAcC","sourcesContent":["import { query, fromHex } from '../../util';\nimport { EthBlock, EthQuery } from './types';\n\n/**\n * Returns information about the latest completed block.\n *\n * @param ethQuery - An EthQuery instance\n * @param includeFullTransactionData - Whether or not to include all data for transactions as\n * opposed to merely hashes. False by default.\n * @returns The block.\n */\nexport default async function fetchLatestBlock(\n  ethQuery: EthQuery,\n  includeFullTransactionData = false,\n): Promise<EthBlock> {\n  const blockNumber = await query(ethQuery, 'blockNumber');\n  const block = await query(ethQuery, 'getBlockByNumber', [\n    blockNumber,\n    includeFullTransactionData,\n  ]);\n  return {\n    ...block,\n    number: fromHex(block.number),\n    baseFeePerGas: fromHex(block.baseFeePerGas),\n  };\n}\n"]}