{"version":3,"file":"calculateGasFeeEstimatesForPriorityLevels.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels.ts"],"names":[],"mappings":"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","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport { fromWei } from 'ethjs-unit';\nimport { Eip1559GasFee, GasFeeEstimates } from '../GasFeeController';\nimport { FeeHistoryBlock } from '../fetchBlockFeeHistory';\nimport { GWEI } from '../../constants';\nimport medianOf from './medianOf';\n\nexport type PriorityLevel = typeof PRIORITY_LEVELS[number];\nexport type Percentile = typeof PRIORITY_LEVEL_PERCENTILES[number];\n\nconst PRIORITY_LEVELS = ['low', 'medium', 'high'] as const;\nconst PRIORITY_LEVEL_PERCENTILES = [10, 20, 30] as const;\nconst SETTINGS_BY_PRIORITY_LEVEL = {\n  low: {\n    percentile: 10 as Percentile,\n    baseFeePercentageMultiplier: new BN(110),\n    priorityFeePercentageMultiplier: new BN(94),\n    minSuggestedMaxPriorityFeePerGas: new BN(1_000_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 30_000,\n    },\n  },\n  medium: {\n    percentile: 20 as Percentile,\n    baseFeePercentageMultiplier: new BN(120),\n    priorityFeePercentageMultiplier: new BN(97),\n    minSuggestedMaxPriorityFeePerGas: new BN(1_500_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 45_000,\n    },\n  },\n  high: {\n    percentile: 30 as Percentile,\n    baseFeePercentageMultiplier: new BN(125),\n    priorityFeePercentageMultiplier: new BN(98),\n    minSuggestedMaxPriorityFeePerGas: new BN(2_000_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 60_000,\n    },\n  },\n};\n\n/**\n * Calculates a set of estimates assigned to a particular priority level based on the data returned\n * by `eth_feeHistory`.\n *\n * @param priorityLevel - The level of fees that dictates how soon a transaction may go through\n * (\"low\", \"medium\", or \"high\").\n * @param blocks - A set of blocks as obtained from {@link fetchBlockFeeHistory}.\n * @returns The estimates.\n */\nfunction calculateEstimatesForPriorityLevel(\n  priorityLevel: PriorityLevel,\n  blocks: FeeHistoryBlock<Percentile>[],\n): Eip1559GasFee {\n  const settings = SETTINGS_BY_PRIORITY_LEVEL[priorityLevel];\n\n  const latestBaseFeePerGas = blocks[blocks.length - 1].baseFeePerGas;\n\n  const adjustedBaseFee = latestBaseFeePerGas\n    .mul(settings.baseFeePercentageMultiplier)\n    .divn(100);\n  const priorityFees = blocks\n    .map((block) => {\n      return 'priorityFeesByPercentile' in block\n        ? block.priorityFeesByPercentile[settings.percentile]\n        : null;\n    })\n    .filter(BN.isBN);\n  const medianPriorityFee = medianOf(priorityFees);\n  const adjustedPriorityFee = medianPriorityFee\n    .mul(settings.priorityFeePercentageMultiplier)\n    .divn(100);\n\n  const suggestedMaxPriorityFeePerGas = BN.max(\n    adjustedPriorityFee,\n    settings.minSuggestedMaxPriorityFeePerGas,\n  );\n  const suggestedMaxFeePerGas = adjustedBaseFee.add(\n    suggestedMaxPriorityFeePerGas,\n  );\n\n  return {\n    ...settings.estimatedWaitTimes,\n    suggestedMaxPriorityFeePerGas: fromWei(suggestedMaxPriorityFeePerGas, GWEI),\n    suggestedMaxFeePerGas: fromWei(suggestedMaxFeePerGas, GWEI),\n  };\n}\n\n/**\n * Calculates a set of estimates suitable for different priority levels based on the data returned\n * by `eth_feeHistory`.\n *\n * @param blocks - A set of blocks populated with data for priority fee percentiles 10, 20, and 30,\n * obtained via {@link BlockFeeHistoryDatasetFetcher}.\n * @returns The estimates.\n */\nexport default function calculateGasFeeEstimatesForPriorityLevels(\n  blocks: FeeHistoryBlock<Percentile>[],\n): Pick<GasFeeEstimates, PriorityLevel> {\n  return PRIORITY_LEVELS.reduce((obj, priorityLevel) => {\n    const gasEstimatesForPriorityLevel = calculateEstimatesForPriorityLevel(\n      priorityLevel,\n      blocks,\n    );\n    return { ...obj, [priorityLevel]: gasEstimatesForPriorityLevel };\n  }, {} as Pick<GasFeeEstimates, PriorityLevel>);\n}\n"]}