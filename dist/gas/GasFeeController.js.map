{"version":3,"file":"GasFeeController.js","sourceRoot":"","sources":["../../src/gas/GasFeeController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Patch } from 'immer';\n\nimport EthQuery from 'eth-query';\nimport { v1 as random } from 'uuid';\nimport { isHexString } from 'ethereumjs-util';\nimport { BaseController } from '../BaseControllerV2';\nimport { safelyExecute } from '../util';\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\nimport type {\n  NetworkController,\n  NetworkState,\n} from '../network/NetworkController';\nimport {\n  fetchGasEstimates as defaultFetchGasEstimates,\n  fetchEthGasPriceEstimate as defaultFetchEthGasPriceEstimate,\n  fetchLegacyGasPriceEstimates as defaultFetchLegacyGasPriceEstimates,\n  calculateTimeEstimate,\n} from './gas-util';\n\nconst GAS_FEE_API = 'https://mock-gas-server.herokuapp.com/';\nexport const LEGACY_GAS_PRICES_API_URL = `https://api.metaswap.codefi.network/gasPrices`;\n\nexport type unknownString = 'unknown';\n\n// Fee Market describes the way gas is set after the london hardfork, and was\n// defined by EIP-1559.\nexport type FeeMarketEstimateType = 'fee-market';\n// Legacy describes gasPrice estimates from before london hardfork, when the\n// user is connected to mainnet and are presented with fast/average/slow\n// estimate levels to choose from.\nexport type LegacyEstimateType = 'legacy';\n// EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n// london this value should only be used for legacy type transactions when on\n// networks that support EIP-1559. This type of estimate is the most accurate\n// to display on custom networks that don't support EIP-1559.\nexport type EthGasPriceEstimateType = 'eth_gasPrice';\n// NoEstimate describes the state of the controller before receiving its first\n// estimate.\nexport type NoEstimateType = 'none';\n\n/**\n * Indicates which type of gasEstimate the controller is currently returning.\n * This is useful as a way of asserting that the shape of gasEstimates matches\n * expectations. NONE is a special case indicating that no previous gasEstimate\n * has been fetched.\n */\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: 'fee-market' as FeeMarketEstimateType,\n  LEGACY: 'legacy' as LegacyEstimateType,\n  ETH_GASPRICE: 'eth_gasPrice' as EthGasPriceEstimateType,\n  NONE: 'none' as NoEstimateType,\n};\n\nexport type GasEstimateType =\n  | FeeMarketEstimateType\n  | EthGasPriceEstimateType\n  | LegacyEstimateType\n  | NoEstimateType;\n\nexport type EstimatedGasFeeTimeBounds = {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n};\n\n/**\n * @type EthGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n * This estimate comes from eth_gasPrice but is converted to dec gwei to match other\n * return values\n * @property gasPrice - A GWEI dec string\n */\n\nexport type EthGasPriceEstimate = {\n  gasPrice: string;\n};\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A set of gas price estimates for networks and accounts that don't support EIP-1559\n * These estimates include low, medium and high all as strings representing gwei in\n * decimal format.\n * @property high - gasPrice, in decimal gwei string format, suggested for fast inclusion\n * @property medium - gasPrice, in decimal gwei string format, suggested for avg inclusion\n * @property low - gasPrice, in decimal gwei string format, suggested for slow inclusion\n */\nexport type LegacyGasPriceEstimate = {\n  high: string;\n  medium: string;\n  low: string;\n};\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\n\nexport type Eip1559GasFee = {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI decimal number\n  suggestedMaxFeePerGas: string; // a GWEI decimal number\n};\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI dec number\n */\n\nexport type GasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n};\n\nconst metadata = {\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n  gasEstimateType: { persist: true, anonymous: false },\n};\n\nexport type GasFeeStateEthGasPrice = {\n  gasFeeEstimates: EthGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: EthGasPriceEstimateType;\n};\n\nexport type GasFeeStateFeeMarket = {\n  gasFeeEstimates: GasFeeEstimates;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n  gasEstimateType: FeeMarketEstimateType;\n};\n\nexport type GasFeeStateLegacy = {\n  gasFeeEstimates: LegacyGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: LegacyEstimateType;\n};\n\nexport type GasFeeStateNoEstimates = {\n  gasFeeEstimates: Record<string, never>;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: NoEstimateType;\n};\n\nexport type FetchGasFeeEstimateOptions = {\n  shouldUpdateState?: boolean;\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type GasFeeState =\n  | GasFeeStateEthGasPrice\n  | GasFeeStateFeeMarket\n  | GasFeeStateLegacy\n  | GasFeeStateNoEstimates;\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = {\n  type: `${typeof name}:stateChange`;\n  payload: [GasFeeState, Patch[]];\n};\n\nexport type GetGasFeeState = {\n  type: `${typeof name}:getState`;\n  handler: () => GasFeeState;\n};\n\ntype GasFeeMessenger = RestrictedControllerMessenger<\n  typeof name,\n  GetGasFeeState,\n  GasFeeStateChange,\n  never,\n  never\n>;\n\nconst defaultState: GasFeeState = {\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n  gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends BaseController<\n  typeof name,\n  GasFeeState,\n  GasFeeMessenger\n> {\n  private intervalId?: NodeJS.Timeout;\n\n  private intervalDelay;\n\n  private pollTokens: Set<string>;\n\n  private legacyAPIEndpoint: string;\n\n  private EIP1559APIEndpoint: string;\n\n  private fetchGasEstimates;\n\n  private fetchEthGasPriceEstimate;\n\n  private fetchLegacyGasPriceEstimates;\n\n  private getCurrentNetworkEIP1559Compatibility;\n\n  private getCurrentNetworkLegacyGasAPICompatibility;\n\n  private getCurrentAccountEIP1559Compatibility;\n\n  private getChainId;\n\n  private currentChainId;\n\n  private ethQuery: any;\n\n  private clientId?: string;\n\n  /**\n   * Creates a GasFeeController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The time in milliseconds to wait between polls.\n   * @param options.messenger - The controller messenger.\n   * @param options.state - The initial state.\n   * @param options.fetchGasEstimates - The function to use to fetch gas estimates. This option is\n   * primarily for testing purposes.\n   * @param options.fetchEthGasPriceEstimate - The function to use to fetch gas price estimates.\n   * This option is primarily for testing purposes.\n   * @param options.fetchLegacyGasPriceEstimates - The function to use to fetch legacy gas price\n   * estimates. This option is primarily for testing purposes.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Determines whether or not the current\n   * network is EIP-1559 compatible.\n   * @param options.getCurrentNetworkLegacyGasAPICompatibility - Determines whether or not the\n   * current network is compatible with the legacy gas price API.\n   * @param options.getCurrentAccountEIP1559Compatibility - Determines whether or not the current\n   * account is EIP-1559 compatible.\n   * @param options.getChainId - Returns the current chain ID.\n   * @param options.getProvider - Returns a network provider for the current network.\n   * @param options.onNetworkStateChange - A function for registering an event handler for the\n   * network state change event.\n   * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for\n   * testing purposes.\n   * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL. This option is primarily\n   * for testing purposes.\n   * @param options.clientId - The client ID used to identify to the gas estimation API who is\n   * asking for estimates.\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    fetchGasEstimates = defaultFetchGasEstimates,\n    fetchEthGasPriceEstimate = defaultFetchEthGasPriceEstimate,\n    fetchLegacyGasPriceEstimates = defaultFetchLegacyGasPriceEstimates,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getChainId,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getProvider,\n    onNetworkStateChange,\n    legacyAPIEndpoint = LEGACY_GAS_PRICES_API_URL,\n    EIP1559APIEndpoint = GAS_FEE_API,\n    clientId,\n  }: {\n    interval?: number;\n    messenger: GasFeeMessenger;\n    state?: GasFeeState;\n    fetchGasEstimates?: typeof defaultFetchGasEstimates;\n    fetchEthGasPriceEstimate?: typeof defaultFetchEthGasPriceEstimate;\n    fetchLegacyGasPriceEstimates?: typeof defaultFetchLegacyGasPriceEstimates;\n    getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n    getCurrentNetworkLegacyGasAPICompatibility: () => boolean;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getChainId: () => `0x${string}` | `${number}` | number;\n    getProvider: () => NetworkController['provider'];\n    onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n    legacyAPIEndpoint?: string;\n    EIP1559APIEndpoint?: string;\n    clientId?: string;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.fetchGasEstimates = fetchGasEstimates;\n    this.fetchEthGasPriceEstimate = fetchEthGasPriceEstimate;\n    this.fetchLegacyGasPriceEstimates = fetchLegacyGasPriceEstimates;\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility = getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility;\n    this.EIP1559APIEndpoint = EIP1559APIEndpoint;\n    this.legacyAPIEndpoint = legacyAPIEndpoint;\n    this.getChainId = getChainId;\n    this.currentChainId = this.getChainId();\n    const provider = getProvider();\n    this.ethQuery = new EthQuery(provider);\n    this.clientId = clientId;\n    onNetworkStateChange(async () => {\n      const newProvider = getProvider();\n      const newChainId = this.getChainId();\n      this.ethQuery = new EthQuery(newProvider);\n      if (this.currentChainId !== newChainId) {\n        this.currentChainId = newChainId;\n        await this.resetPolling();\n      }\n    });\n  }\n\n  async resetPolling() {\n    if (this.pollTokens.size !== 0) {\n      const tokens = Array.from(this.pollTokens);\n      this.stopPolling();\n      await this.getGasFeeEstimatesAndStartPolling(tokens[0]);\n      tokens.slice(1).forEach((token) => {\n        this.pollTokens.add(token);\n      });\n    }\n  }\n\n  async fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions) {\n    return await this._fetchGasFeeEstimateData(options);\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    const _pollToken = pollToken || random();\n\n    this.pollTokens.add(_pollToken);\n\n    if (this.pollTokens.size === 1) {\n      await this._fetchGasFeeEstimateData();\n      this._poll();\n    }\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state.\n   *\n   * @param options - The gas fee estimate options.\n   * @param options.shouldUpdateState - Determines whether the state should be updated with the\n   * updated gas estimates.\n   * @returns The gas fee estimates.\n   */\n  async _fetchGasFeeEstimateData(\n    options: FetchGasFeeEstimateOptions = {},\n  ): Promise<GasFeeState> {\n    const { shouldUpdateState = true } = options;\n    let isEIP1559Compatible;\n    const isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility();\n\n    let chainId = this.getChainId();\n    if (typeof chainId === 'string' && isHexString(chainId)) {\n      chainId = parseInt(chainId, 16);\n    }\n\n    try {\n      isEIP1559Compatible = await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible = false;\n    }\n\n    let newState: GasFeeState = {\n      gasFeeEstimates: {},\n      estimatedGasFeeTimeBounds: {},\n      gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n    };\n\n    try {\n      if (isEIP1559Compatible) {\n        const estimates = await this.fetchGasEstimates(\n          this.EIP1559APIEndpoint.replace('<chain_id>', `${chainId}`),\n          this.clientId,\n        );\n        const {\n          suggestedMaxPriorityFeePerGas,\n          suggestedMaxFeePerGas,\n        } = estimates.medium;\n        const estimatedGasFeeTimeBounds = this.getTimeEstimate(\n          suggestedMaxPriorityFeePerGas,\n          suggestedMaxFeePerGas,\n        );\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await this.fetchLegacyGasPriceEstimates(\n          this.legacyAPIEndpoint.replace('<chain_id>', `${chainId}`),\n          this.clientId,\n        );\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds: {},\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error('Main gas fee/price estimation failed. Use fallback');\n      }\n    } catch {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate(this.ethQuery);\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds: {},\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error) {\n        throw new Error(\n          `Gas fee/price estimation failed. Message: ${error.message}`,\n        );\n      }\n    }\n\n    if (shouldUpdateState) {\n      this.update(() => {\n        return newState;\n      });\n    }\n\n    return newState;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty.\n   *\n   * @param pollToken - The poll token to disconnect.\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n}\n\nexport default GasFeeController;\n"]}