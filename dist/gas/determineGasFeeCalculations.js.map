{"version":3,"file":"determineGasFeeCalculations.js","sourceRoot":"","sources":["../../src/gas/determineGasFeeCalculations.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yDAO4B;AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,SAA8B,2BAA2B,CAAC,EACxD,mBAAmB,EACnB,wBAAwB,EACxB,iBAAiB,EACjB,oBAAoB,EACpB,iCAAiC,EACjC,4BAA4B,EAC5B,+BAA+B,EAC/B,wBAAwB,EACxB,qBAAqB,EACrB,QAAQ,EACR,QAAQ,GAyBT;;QACC,IAAI;YACF,IAAI,mBAAmB,EAAE;gBACvB,IAAI,SAA0B,CAAC;gBAC/B,IAAI;oBACF,SAAS,GAAG,MAAM,iBAAiB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;iBACrE;gBAAC,WAAM;oBACN,SAAS,GAAG,MAAM,iCAAiC,CAAC,QAAQ,CAAC,CAAC;iBAC/D;gBACD,MAAM,EAAE,6BAA6B,EAAE,qBAAqB,EAAE,GAC5D,SAAS,CAAC,MAAM,CAAC;gBACnB,MAAM,yBAAyB,GAAG,qBAAqB,CACrD,6BAA6B,EAC7B,qBAAqB,EACrB,SAAS,CACV,CAAC;gBACF,OAAO;oBACL,eAAe,EAAE,SAAS;oBAC1B,yBAAyB;oBACzB,eAAe,EAAE,qCAAkB,CAAC,UAAU;iBAC/C,CAAC;aACH;iBAAM,IAAI,wBAAwB,EAAE;gBACnC,MAAM,SAAS,GAAG,MAAM,4BAA4B,CAClD,+BAA+B,EAC/B,QAAQ,CACT,CAAC;gBACF,OAAO;oBACL,eAAe,EAAE,SAAS;oBAC1B,yBAAyB,EAAE,EAAE;oBAC7B,eAAe,EAAE,qCAAkB,CAAC,MAAM;iBAC3C,CAAC;aACH;YACD,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;QAAC,WAAM;YACN,IAAI;gBACF,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBAC3D,OAAO;oBACL,eAAe,EAAE,SAAS;oBAC1B,yBAAyB,EAAE,EAAE;oBAC7B,eAAe,EAAE,qCAAkB,CAAC,YAAY;iBACjD,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,KAAK,YAAY,KAAK,EAAE;oBAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;iBACH;gBACD,MAAM,KAAK,CAAC;aACb;SACF;IACH,CAAC;CAAA;AAtFD,8CAsFC","sourcesContent":["import {\n  GAS_ESTIMATE_TYPES,\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific\n * API.\n * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific\n * estimates.\n * @param args.fetchGasEstimatesViaEthFeeHistory - A function that fetches gas estimates using\n * `eth_feeHistory` (an EIP-1559 feature).\n * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an\n * non-EIP-1559-specific API.\n * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain\n * non-EIP-1559-specific estimates.\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.clientId - An identifier that an API can use to know who is asking for estimates.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations({\n  isEIP1559Compatible,\n  isLegacyGasAPICompatible,\n  fetchGasEstimates,\n  fetchGasEstimatesUrl,\n  fetchGasEstimatesViaEthFeeHistory,\n  fetchLegacyGasPriceEstimates,\n  fetchLegacyGasPriceEstimatesUrl,\n  fetchEthGasPriceEstimate,\n  calculateTimeEstimate,\n  clientId,\n  ethQuery,\n}: {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  fetchGasEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<GasFeeEstimates>;\n  fetchGasEstimatesUrl: string;\n  fetchGasEstimatesViaEthFeeHistory: (\n    ethQuery: any,\n  ) => Promise<GasFeeEstimates>;\n  fetchLegacyGasPriceEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<LegacyGasPriceEstimate>;\n  fetchLegacyGasPriceEstimatesUrl: string;\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  clientId: string | undefined;\n  ethQuery: any;\n}): Promise<GasFeeCalculations> {\n  try {\n    if (isEIP1559Compatible) {\n      let estimates: GasFeeEstimates;\n      try {\n        estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);\n      } catch {\n        estimates = await fetchGasEstimatesViaEthFeeHistory(ethQuery);\n      }\n      const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } =\n        estimates.medium;\n      const estimatedGasFeeTimeBounds = calculateTimeEstimate(\n        suggestedMaxPriorityFeePerGas,\n        suggestedMaxFeePerGas,\n        estimates,\n      );\n      return {\n        gasFeeEstimates: estimates,\n        estimatedGasFeeTimeBounds,\n        gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n      };\n    } else if (isLegacyGasAPICompatible) {\n      const estimates = await fetchLegacyGasPriceEstimates(\n        fetchLegacyGasPriceEstimatesUrl,\n        clientId,\n      );\n      return {\n        gasFeeEstimates: estimates,\n        estimatedGasFeeTimeBounds: {},\n        gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n      };\n    }\n    throw new Error('Main gas fee/price estimation failed. Use fallback');\n  } catch {\n    try {\n      const estimates = await fetchEthGasPriceEstimate(ethQuery);\n      return {\n        gasFeeEstimates: estimates,\n        estimatedGasFeeTimeBounds: {},\n        gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(\n          `Gas fee/price estimation failed. Message: ${error.message}`,\n        );\n      }\n      throw error;\n    }\n  }\n}\n"]}