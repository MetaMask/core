{"version":3,"file":"fetchGasEstimatesViaEthFeeHistory.js","sourceRoot":"","sources":["../../src/gas/fetchGasEstimatesViaEthFeeHistory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAAqC;AACrC,4CAAoC;AAGpC,kFAA0D;AAC1D,4GAAoF;AACpF,8JAAsI;AAEtI;;;;;;;;;;;;;;;;;GAiBG;AACH,SAA8B,iCAAiC,CAC7D,QAAkB;;QAElB,MAAM,WAAW,GAAG,MAAM,IAAA,0BAAgB,EAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,MAAM,IAAA,8BAAoB,EAAC;YACxC,QAAQ;YACR,QAAQ,EAAE,WAAW,CAAC,MAAM;YAC5B,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;SAC1B,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,IAAA,oBAAO,EAAC,WAAW,CAAC,aAAa,EAAE,gBAAI,CAAC,CAAC;QAElE,MAAM,sBAAsB,GAC1B,IAAA,mDAAyC,EAAC,MAAM,CAAC,CAAC;QAEpD,uCACK,sBAAsB,KACzB,gBAAgB,EAChB,sBAAsB,EAAE,IAAI,EAC5B,YAAY,EAAE,IAAI,EAClB,sBAAsB,EAAE,IAAI,EAC5B,0BAA0B,EAAE,IAAI,EAChC,gBAAgB,EAAE,IAAI,EACtB,iBAAiB,EAAE,IAAI,IACvB;IACJ,CAAC;CAAA;AAzBD,oDAyBC","sourcesContent":["import { fromWei } from 'ethjs-unit';\nimport { GWEI } from '../constants';\nimport { GasFeeEstimates } from './GasFeeController';\nimport { EthQuery } from './fetchGasEstimatesViaEthFeeHistory/types';\nimport fetchBlockFeeHistory from './fetchBlockFeeHistory';\nimport fetchLatestBlock from './fetchGasEstimatesViaEthFeeHistory/fetchLatestBlock';\nimport calculateGasFeeEstimatesForPriorityLevels from './fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels';\n\n/**\n * Generates gas fee estimates based on gas fees that have been used in the recent past so that\n * those estimates can be displayed to users.\n *\n * To produce the estimates, the last 5 blocks are read from the network, and for each block, the\n * priority fees for transactions at the 10th, 20th, and 30th percentiles are also read (here\n * \"percentile\" signifies the level at which those transactions contribute to the overall gas used\n * for the block, where higher percentiles correspond to higher fees). This information is used to\n * calculate reasonable max priority and max fees for three different priority levels (higher\n * priority = higher fee).\n *\n * Note that properties are returned for other data that are normally obtained via the API; however,\n * to prevent extra requests to Infura, these properties are empty.\n *\n * @param ethQuery - An EthQuery instance.\n * @returns Base and priority fee estimates, categorized by priority level, as well as an estimate\n * for the next block's base fee.\n */\nexport default async function fetchGasEstimatesViaEthFeeHistory(\n  ethQuery: EthQuery,\n): Promise<GasFeeEstimates> {\n  const latestBlock = await fetchLatestBlock(ethQuery);\n  const blocks = await fetchBlockFeeHistory({\n    ethQuery,\n    endBlock: latestBlock.number,\n    numberOfBlocks: 5,\n    percentiles: [10, 20, 30],\n  });\n  const estimatedBaseFee = fromWei(latestBlock.baseFeePerGas, GWEI);\n\n  const levelSpecificEstimates =\n    calculateGasFeeEstimatesForPriorityLevels(blocks);\n\n  return {\n    ...levelSpecificEstimates,\n    estimatedBaseFee,\n    historicalBaseFeeRange: null,\n    baseFeeTrend: null,\n    latestPriorityFeeRange: null,\n    historicalPriorityFeeRange: null,\n    priorityFeeTrend: null,\n    networkCongestion: null,\n  };\n}\n"]}