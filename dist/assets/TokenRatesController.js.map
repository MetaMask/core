{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../../src/assets/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch, toChecksumHexAddress } from '../util';\n\nimport type { NetworkState } from '../network/NetworkController';\nimport { FALL_BACK_VS_CURRENCY } from '../constants';\nimport { fetchExchangeRate as fetchNativeExchangeRate } from '../apis/crypto-compare';\nimport type { TokensState } from './TokensController';\nimport type { CurrencyRateState } from './CurrencyRateController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n */\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n/**\n * @type CoinGeckoPlatform\n *\n * CoinGecko supported platform API representation\n */\nexport interface CoinGeckoPlatform {\n  id: string;\n  chain_identifier: null | number;\n  name: string;\n  shortname: string;\n}\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\nexport interface Token {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  balanceError?: unknown;\n  isERC721?: boolean;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n * @property interval - Polling interval used to fetch new token rates\n * @property nativeCurrency - Current native currency selected to use base of rates\n * @property chainId - Current network chainId\n * @property tokens - List of tokens to track exchange rates for\n * @property threshold - Threshold to invalidate the supportedChains\n */\nexport interface TokenRatesConfig extends BaseConfig {\n  interval: number;\n  nativeCurrency: string;\n  chainId: string;\n  tokens: Token[];\n  threshold: number;\n}\n\ninterface ContractExchangeRates {\n  [address: string]: number | undefined;\n}\n\ninterface SupportedChainsCache {\n  timestamp: number;\n  data: CoinGeckoPlatform[] | null;\n}\n\ninterface SupportedVsCurrenciesCache {\n  timestamp: number;\n  data: string[];\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n * @property supportedChains - Cached chain data\n */\nexport interface TokenRatesState extends BaseState {\n  contractExchangeRates: ContractExchangeRates;\n}\n\nconst CoinGeckoApi = {\n  BASE_URL: 'https://api.coingecko.com/api/v3',\n  getTokenPriceURL(chainSlug: string, query: string) {\n    return `${this.BASE_URL}/simple/token_price/${chainSlug}?${query}`;\n  },\n  getPlatformsURL() {\n    return `${this.BASE_URL}/asset_platforms`;\n  },\n  getSupportedVsCurrencies() {\n    return `${this.BASE_URL}/simple/supported_vs_currencies`;\n  },\n};\n\n/**\n * Finds the chain slug in the data array given a chainId.\n *\n * @param chainId - The current chain ID.\n * @param data - A list platforms supported by the CoinGecko API.\n * @returns The CoinGecko slug for the given chain ID, or `null` if the slug was not found.\n */\nfunction findChainSlug(\n  chainId: string,\n  data: CoinGeckoPlatform[] | null,\n): string | null {\n  if (!data) {\n    return null;\n  }\n  const chain =\n    data.find(\n      ({ chain_identifier }) =>\n        chain_identifier !== null && String(chain_identifier) === chainId,\n    ) ?? null;\n  return chain?.id || null;\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends BaseController<\n  TokenRatesConfig,\n  TokenRatesState\n> {\n  private handle?: NodeJS.Timer;\n\n  private tokenList: Token[] = [];\n\n  private supportedChains: SupportedChainsCache = {\n    timestamp: 0,\n    data: null,\n  };\n\n  private supportedVsCurrencies: SupportedVsCurrenciesCache = {\n    timestamp: 0,\n    data: [],\n  };\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TokenRatesController';\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.\n   * @param options.onCurrencyRateStateChange - Allows subscribing to currency rate controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network state changes.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onTokensStateChange,\n      onCurrencyRateStateChange,\n      onNetworkStateChange,\n    }: {\n      onTokensStateChange: (\n        listener: (tokensState: TokensState) => void,\n      ) => void;\n      onCurrencyRateStateChange: (\n        listener: (currencyRateState: CurrencyRateState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n    },\n    config?: Partial<TokenRatesConfig>,\n    state?: Partial<TokenRatesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      disabled: true,\n      interval: 3 * 60 * 1000,\n      nativeCurrency: 'eth',\n      chainId: '',\n      tokens: [],\n      threshold: 6 * 60 * 60 * 1000,\n    };\n\n    this.defaultState = {\n      contractExchangeRates: {},\n    };\n    this.initialize();\n    this.configure({ disabled: false }, false, false);\n    onTokensStateChange(({ tokens, detectedTokens }) => {\n      this.configure({ tokens: [...tokens, ...detectedTokens] });\n    });\n\n    onCurrencyRateStateChange((currencyRateState) => {\n      this.configure({ nativeCurrency: currencyRateState.nativeCurrency });\n    });\n\n    onNetworkStateChange(({ provider }) => {\n      const { chainId } = provider;\n      this.update({ contractExchangeRates: {} });\n      this.configure({ chainId });\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token rates.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateExchangeRates());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Sets a new chainId.\n   *\n   * TODO: Replace this with a method.\n   *\n   * @param _chainId - The current chain ID.\n   */\n  set chainId(_chainId: string) {\n    !this.disabled && safelyExecute(() => this.updateExchangeRates());\n  }\n\n  get chainId() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Sets a new token list to track prices.\n   *\n   * TODO: Replace this with a method.\n   *\n   * @param tokens - List of tokens to track exchange rates for.\n   */\n  set tokens(tokens: Token[]) {\n    this.tokenList = tokens;\n    !this.disabled && safelyExecute(() => this.updateExchangeRates());\n  }\n\n  get tokens() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Fetches a pairs of token address and native currency.\n   *\n   * @param chainSlug - Chain string identifier.\n   * @param vsCurrency - Query according to tokens in tokenList and native currency.\n   * @returns The exchange rates for the given pairs.\n   */\n  async fetchExchangeRate(\n    chainSlug: string,\n    vsCurrency: string,\n  ): Promise<CoinGeckoResponse> {\n    const tokenPairs = this.tokenList.map((token) => token.address).join(',');\n    const query = `contract_addresses=${tokenPairs}&vs_currencies=${vsCurrency.toLowerCase()}`;\n    return handleFetch(CoinGeckoApi.getTokenPriceURL(chainSlug, query));\n  }\n\n  /**\n   * Checks if the current native currency is a supported vs currency to use\n   * to query for token exchange rates.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @returns A boolean indicating whether it's a supported vsCurrency.\n   */\n  private async checkIsSupportedVsCurrency(nativeCurrency: string) {\n    const { threshold } = this.config;\n    const { timestamp, data } = this.supportedVsCurrencies;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const currencies = await handleFetch(\n        CoinGeckoApi.getSupportedVsCurrencies(),\n      );\n      this.supportedVsCurrencies = {\n        data: currencies,\n        timestamp: Date.now(),\n      };\n      return currencies.includes(nativeCurrency.toLowerCase());\n    }\n\n    return data.includes(nativeCurrency.toLowerCase());\n  }\n\n  /**\n   * Gets current chain ID slug from cached supported platforms CoinGecko API response.\n   * If cached supported platforms response is stale, fetches and updates it.\n   *\n   * @returns The CoinGecko slug for the current chain ID.\n   */\n  async getChainSlug(): Promise<string | null> {\n    const { threshold, chainId } = this.config;\n    const { data, timestamp } = this.supportedChains;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const platforms = await handleFetch(CoinGeckoApi.getPlatformsURL());\n      this.supportedChains = {\n        data: platforms,\n        timestamp: Date.now(),\n      };\n      return findChainSlug(chainId, platforms);\n    }\n\n    return findChainSlug(chainId, data);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    if (this.tokenList.length === 0 || this.disabled) {\n      return;\n    }\n    const slug = await this.getChainSlug();\n\n    let newContractExchangeRates: ContractExchangeRates = {};\n    if (!slug) {\n      this.tokenList.forEach((token) => {\n        const address = toChecksumHexAddress(token.address);\n        newContractExchangeRates[address] = undefined;\n      });\n    } else {\n      const { nativeCurrency } = this.config;\n      newContractExchangeRates = await this.fetchAndMapExchangeRates(\n        nativeCurrency,\n        slug,\n      );\n    }\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n\n  /**\n   * Checks if the active network's native currency is supported by the coingecko API.\n   * If supported, it fetches and maps contractExchange rates to a format to be consumed by the UI.\n   * If not supported, it fetches contractExchange rates and maps them from token/fallback-currency\n   * to token/nativeCurrency.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @param slug - The unique slug used to id the chain by the coingecko api\n   * should be used to query token exchange rates.\n   * @returns An object with conversion rates for each token\n   * related to the network's native currency.\n   */\n  async fetchAndMapExchangeRates(\n    nativeCurrency: string,\n    slug: string,\n  ): Promise<ContractExchangeRates> {\n    const contractExchangeRates: ContractExchangeRates = {};\n\n    // check if native currency is supported as a vs_currency by the API\n    const nativeCurrencySupported = await this.checkIsSupportedVsCurrency(\n      nativeCurrency,\n    );\n\n    if (nativeCurrencySupported) {\n      // If it is we can do a simple fetch against the CoinGecko API\n      const prices = await this.fetchExchangeRate(slug, nativeCurrency);\n      this.tokenList.forEach((token) => {\n        const price = prices[token.address.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(token.address)] = price\n          ? price[nativeCurrency.toLowerCase()]\n          : 0;\n      });\n    } else {\n      // if native currency is not supported we need to use a fallback vsCurrency, get the exchange rates\n      // in token/fallback-currency format and convert them to expected token/nativeCurrency format.\n      let tokenExchangeRates;\n      let vsCurrencyToNativeCurrencyConversionRate = 0;\n      try {\n        [\n          tokenExchangeRates,\n          { conversionRate: vsCurrencyToNativeCurrencyConversionRate },\n        ] = await Promise.all([\n          this.fetchExchangeRate(slug, FALL_BACK_VS_CURRENCY),\n          fetchNativeExchangeRate(nativeCurrency, FALL_BACK_VS_CURRENCY, false),\n        ]);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes('market does not exist for this coin pair')\n        ) {\n          return {};\n        }\n        throw error;\n      }\n\n      for (const [tokenAddress, conversion] of Object.entries(\n        tokenExchangeRates,\n      )) {\n        const tokenToVsCurrencyConversionRate =\n          conversion[FALL_BACK_VS_CURRENCY.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(tokenAddress)] =\n          tokenToVsCurrencyConversionRate *\n          vsCurrencyToNativeCurrencyConversionRate;\n      }\n    }\n\n    return contractExchangeRates;\n  }\n}\n\nexport default TokenRatesController;\n"]}