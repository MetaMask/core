{"version":3,"file":"assetsUtil.js","sourceRoot":"","sources":["../../src/assets/assetsUtil.ts"],"names":[],"mappings":";;;AAEA;;;;;;;;GAQG;AACH,SAAgB,2BAA2B,CACzC,sBAA2C,EAC3C,WAAwB;IAExB,MAAM,IAAI,GAAkC;QAC1C,OAAO;QACP,iBAAiB;QACjB,cAAc;QACd,gBAAgB;QAChB,eAAe;QACf,WAAW;QACX,mBAAmB;QACnB,cAAc;KACf,CAAC;IACF,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACjD,IACE,sBAAsB,CAAC,GAAG,CAAC;YAC3B,sBAAsB,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,GAAG,CAAC,EAChD;YACA,OAAO,KAAK,GAAG,CAAC,CAAC;SAClB;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,OAAO,eAAe,GAAG,CAAC,CAAC;AAC7B,CAAC;AAxBD,kEAwBC","sourcesContent":["import { Collectible, CollectibleMetadata } from './CollectiblesController';\n\n/**\n * Compares collectible metadata entries to any collectible entry.\n * We need this method when comparing a new fetched collectible metadata, in case a entry changed to a defined value,\n * there's a need to update the collectible in state.\n *\n * @param newCollectibleMetadata - Collectible metadata object.\n * @param collectible - Collectible object to compare with.\n * @returns Whether there are differences.\n */\nexport function compareCollectiblesMetadata(\n  newCollectibleMetadata: CollectibleMetadata,\n  collectible: Collectible,\n) {\n  const keys: (keyof CollectibleMetadata)[] = [\n    'image',\n    'backgroundColor',\n    'imagePreview',\n    'imageThumbnail',\n    'imageOriginal',\n    'animation',\n    'animationOriginal',\n    'externalLink',\n  ];\n  const differentValues = keys.reduce((value, key) => {\n    if (\n      newCollectibleMetadata[key] &&\n      newCollectibleMetadata[key] !== collectible[key]\n    ) {\n      return value + 1;\n    }\n    return value;\n  }, 0);\n  return differentValues > 0;\n}\n"]}