{"version":3,"file":"ERC1155Standard.js","sourceRoot":"","sources":["../../../../src/assets/CollectibleStandards/ERC1155/ERC1155Standard.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,iCAAiC,GAAG,YAAY,CAAC;AACvD,MAAM,mCAAmC,GAAG,YAAY,CAAC;AAEzD,MAAa,eAAe;IAA5B;QACE;;;;;WAKG;QACH,yCAAoC,GAAG,CACrC,QAAa,EACK,EAAE;YACpB,OAAO,IAAI,CAAC,yBAAyB,CACnC,QAAQ,EACR,iCAAiC,CAClC,CAAC;QACJ,CAAC,CAAA,CAAC;QAEF;;;;;WAKG;QACH,2CAAsC,GAAG,CACvC,QAAa,EACK,EAAE;YACpB,OAAO,IAAI,CAAC,yBAAyB,CACnC,QAAQ,EACR,mCAAmC,CACpC,CAAC;QACJ,CAAC,CAAA,CAAC;QAEF;;;;;;WAMG;QACH,QAAG,GAAG,CAAO,QAAa,EAAE,OAAe,EAAmB,EAAE;YAC9D,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC7C,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,MAAc,EAAE,EAAE;oBACrD,wBAAwB;oBACxB,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACR;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC;QAEF;;;;;;;WAOG;QACH,iBAAY,GAAG,CACb,QAAa,EACb,OAAe,EACf,OAAe,EACE,EAAE;YACnB,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC7C,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,KAAY,EAAE,MAAc,EAAE,EAAE;oBACpE,wBAAwB;oBACxB,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACR;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC;QAEF;;;;;;;;;;;;WAYG;QACH,mBAAc,GAAG,CACf,QAAa,EACb,QAAgB,EAChB,IAAY,EACZ,EAAU,EACV,EAAU,EACV,KAAa,EACE,EAAE;YACjB,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,QAAQ,CAAC,cAAc,CACrB,QAAQ,EACR,IAAI,EACJ,EAAE,EACF,EAAE,EACF,KAAK,EACL,CAAC,KAAY,EAAE,MAAY,EAAE,EAAE;oBAC7B,wBAAwB;oBACxB,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACR;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CACF,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC;QAEF;;;;;;WAMG;QACK,8BAAyB,GAAG,CAClC,QAAa,EACb,WAAmB,EACD,EAAE;YACpB,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC9C,QAAQ,CAAC,iBAAiB,CACxB,WAAW,EACX,CAAC,KAAY,EAAE,MAAe,EAAE,EAAE;oBAChC,wBAAwB;oBACxB,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACR;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CACF,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC;IACJ,CAAC;CAAA;AA7ID,0CA6IC","sourcesContent":["const ERC1155_METADATA_URI_INTERFACE_ID = '0x0e89341c';\nconst ERC1155_TOKEN_RECEIVER_INTERFACE_ID = '0x4e2312e0';\n\nexport class ERC1155Standard {\n  /**\n   * Query if contract implements ERC1155 URI Metadata interface.\n   *\n   * @param contract - ERC1155 asset contract.\n   * @returns Promise resolving to whether the contract implements ERC1155 URI Metadata interface.\n   */\n  contractSupportsURIMetadataInterface = async (\n    contract: any,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      contract,\n      ERC1155_METADATA_URI_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Query if contract implements ERC1155 Token Receiver interface.\n   *\n   * @param contract - ERC1155 asset contract.\n   * @returns Promise resolving to whether the contract implements ERC1155 Token Receiver interface.\n   */\n  contractSupportsTokenReceiverInterface = async (\n    contract: any,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      contract,\n      ERC1155_TOKEN_RECEIVER_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Query for tokenURI for a given asset.\n   *\n   * @param contract - ERC1155 asset contract.\n   * @param tokenId - ERC1155 asset identifier.\n   * @returns Promise resolving to the 'tokenURI'.\n   */\n  uri = async (contract: any, tokenId: string): Promise<string> => {\n    return new Promise<string>((resolve, reject) => {\n      contract.uri(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for balance of a given ERC1155 token.\n   *\n   * @param contract - ERC1155 asset contract.\n   * @param address - Wallet public address.\n   * @param tokenId - ERC1155 asset identifier.\n   * @returns Promise resolving to the 'balanceOf'.\n   */\n  getBalanceOf = async (\n    contract: any,\n    address: string,\n    tokenId: string,\n  ): Promise<number> => {\n    return new Promise<number>((resolve, reject) => {\n      contract.balanceOf(address, tokenId, (error: Error, result: number) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Transfer single ERC1155 token.\n   * When minting/creating tokens, the from arg MUST be set to 0x0 (i.e. zero address).\n   * When burning/destroying tokens, the to arg MUST be set to 0x0 (i.e. zero address).\n   *\n   * @param contract - ERC1155 asset contract.\n   * @param operator - ERC1155 token address.\n   * @param from - ERC1155 token holder.\n   * @param to - ERC1155 token recipient.\n   * @param id - ERC1155 token id.\n   * @param value - Number of tokens to be sent.\n   * @returns Promise resolving to the 'transferSingle'.\n   */\n  transferSingle = async (\n    contract: any,\n    operator: string,\n    from: string,\n    to: string,\n    id: string,\n    value: string,\n  ): Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n      contract.transferSingle(\n        operator,\n        from,\n        to,\n        id,\n        value,\n        (error: Error, result: void) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  };\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param contract - ERC1155 asset contract.\n   * @param interfaceId - Interface identifier.\n   * @returns Promise resolving to whether the contract implements `interfaceID`.\n   */\n  private contractSupportsInterface = async (\n    contract: any,\n    interfaceId: string,\n  ): Promise<boolean> => {\n    return new Promise<boolean>((resolve, reject) => {\n      contract.supportsInterface(\n        interfaceId,\n        (error: Error, result: boolean) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  };\n}\n"]}