{"version":3,"file":"TokenBalancesController.js","sourceRoot":"","sources":["../../src/assets/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAAqC;AAS5B,mFATA,oBAAE,OASA;AARX,sDAA0E;AAC1E,kCAAwC;AA+BxC;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,+BAG5C;IAYC;;;;;;;;;OASG;IACH,YACE,EACE,mBAAmB,EACnB,kBAAkB,EAClB,iBAAiB,GAOlB,EACD,MAAqC,EACrC,KAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAlCvB;;WAEG;QACM,SAAI,GAAG,yBAAyB,CAAC;QAgCxC,IAAI,CAAC,aAAa,GAAG;YACnB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,EAAE;SACX,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,mBAAmB,CAAC,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,EAAE;YACjD,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC1B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,IAAA,oBAAa,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;OAEG;IACG,cAAc;;YAClB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YACD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;YAC/B,MAAM,mBAAmB,GAA8B,EAAE,CAAC;YAC1D,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACtB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI;oBACF,mBAAmB,CAAC,OAAO,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,CACzD,OAAO,EACP,IAAI,CAAC,kBAAkB,EAAE,CAC1B,CAAC;oBACF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC/B;gBAAC,OAAO,KAAK,EAAE;oBACd,mBAAmB,CAAC,OAAO,CAAC,GAAG,IAAI,oBAAE,CAAC,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC;iBAChC;aACF;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACzD,CAAC;KAAA;CACF;AA9FD,0DA8FC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\nimport type { PreferencesState } from '../user/PreferencesController';\nimport { Token } from './TokenRatesController';\nimport { TokensState } from './TokensController';\nimport type { AssetsContractController } from './AssetsContractController';\n\n// TODO: Remove this export in the next major release\nexport { BN };\n\n/**\n * @type TokenBalancesConfig\n *\n * Token balances controller configuration\n * @property interval - Polling interval used to fetch new token balances\n * @property tokens - List of tokens to track balances for\n */\nexport interface TokenBalancesConfig extends BaseConfig {\n  interval: number;\n  tokens: Token[];\n}\n\n/**\n * @type TokenBalancesState\n *\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport interface TokenBalancesState extends BaseState {\n  contractBalances: { [address: string]: BN };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  TokenBalancesConfig,\n  TokenBalancesState\n> {\n  private handle?: NodeJS.Timer;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TokenBalancesController';\n\n  private getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  /**\n   * Creates a TokenBalancesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.onTokensStateChange - Allows subscribing to assets controller state changes.\n   * @param options.getSelectedAddress - Gets the current selected address.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onTokensStateChange,\n      getSelectedAddress,\n      getERC20BalanceOf,\n    }: {\n      onTokensStateChange: (\n        listener: (tokenState: TokensState) => void,\n      ) => void;\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n    },\n    config?: Partial<TokenBalancesConfig>,\n    state?: Partial<TokenBalancesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 180000,\n      tokens: [],\n    };\n    this.defaultState = { contractBalances: {} };\n    this.initialize();\n    onTokensStateChange(({ tokens, detectedTokens }) => {\n      this.configure({ tokens: [...tokens, ...detectedTokens] });\n      this.updateBalances();\n    });\n    this.getSelectedAddress = getSelectedAddress;\n    this.getERC20BalanceOf = getERC20BalanceOf;\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateBalances());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.disabled) {\n      return;\n    }\n    const { tokens } = this.config;\n    const newContractBalances: { [address: string]: BN } = {};\n    for (const i in tokens) {\n      const { address } = tokens[i];\n      try {\n        newContractBalances[address] = await this.getERC20BalanceOf(\n          address,\n          this.getSelectedAddress(),\n        );\n        tokens[i].balanceError = null;\n      } catch (error) {\n        newContractBalances[address] = new BN(0);\n        tokens[i].balanceError = error;\n      }\n    }\n    this.update({ contractBalances: newContractBalances });\n  }\n}\n\nexport default TokenBalancesController;\n"]}