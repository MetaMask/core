{"version":3,"file":"RateLimitController.js","sourceRoot":"","sources":["../../src/ratelimit/RateLimitController.ts"],"names":[],"mappings":"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","sourcesContent":["import { ethErrors } from 'eth-rpc-errors';\nimport type { Patch } from 'immer';\n\nimport { BaseController } from '../BaseControllerV2';\n\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\n\n/**\n * @type RateLimitState\n * @property requests - Object containing number of requests in a given interval for each origin and api type combination\n */\nexport type RateLimitState<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = {\n  requests: Record<keyof RateLimitedApis, Record<string, number>>;\n};\n\nconst name = 'RateLimitController';\n\nexport type RateLimitStateChange<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = {\n  type: `${typeof name}:stateChange`;\n  payload: [RateLimitState<RateLimitedApis>, Patch[]];\n};\n\nexport type GetRateLimitState<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = {\n  type: `${typeof name}:getState`;\n  handler: () => RateLimitState<RateLimitedApis>;\n};\n\nexport type CallApi<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = {\n  type: `${typeof name}:call`;\n  handler: RateLimitController<RateLimitedApis>['call'];\n};\n\nexport type RateLimitControllerActions<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = GetRateLimitState<RateLimitedApis> | CallApi<RateLimitedApis>;\n\nexport type RateLimitMessenger<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> = RestrictedControllerMessenger<\n  typeof name,\n  RateLimitControllerActions<RateLimitedApis>,\n  RateLimitStateChange<RateLimitedApis>,\n  never,\n  never\n>;\n\nconst metadata = {\n  requests: { persist: false, anonymous: false },\n};\n\n/**\n * Controller with logic for rate-limiting API endpoints per requesting origin.\n */\nexport class RateLimitController<\n  RateLimitedApis extends Record<string, (...args: any[]) => any>,\n> extends BaseController<\n  typeof name,\n  RateLimitState<RateLimitedApis>,\n  RateLimitMessenger<RateLimitedApis>\n> {\n  private implementations;\n\n  private rateLimitTimeout;\n\n  private rateLimitCount;\n\n  /**\n   * Creates a RateLimitController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.implementations - Mapping from API type to API implementation.\n   * @param options.rateLimitTimeout - The time window in which the rate limit is applied (in ms).\n   * @param options.rateLimitCount - The amount of calls an origin can make in the rate limit time window.\n   */\n  constructor({\n    rateLimitTimeout = 5000,\n    rateLimitCount = 1,\n    messenger,\n    state,\n    implementations,\n  }: {\n    rateLimitTimeout?: number;\n    rateLimitCount?: number;\n    messenger: RateLimitMessenger<RateLimitedApis>;\n    state?: Partial<RateLimitState<RateLimitedApis>>;\n    implementations: RateLimitedApis;\n  }) {\n    const defaultState = {\n      requests: Object.keys(implementations).reduce(\n        (acc, key) => ({ ...acc, [key]: {} }),\n        {} as Record<keyof RateLimitedApis, Record<string, number>>,\n      ),\n    };\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.implementations = implementations;\n    this.rateLimitTimeout = rateLimitTimeout;\n    this.rateLimitCount = rateLimitCount;\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:call` as const,\n      ((\n        origin: string,\n        type: keyof RateLimitedApis,\n        ...args: Parameters<RateLimitedApis[keyof RateLimitedApis]>\n      ) => this.call(origin, type, ...args)) as any,\n    );\n  }\n\n  /**\n   * Calls an API if the requesting origin is not rate-limited.\n   *\n   * @param origin - The requesting origin.\n   * @param type - The type of API call to make.\n   * @param args - Arguments for the API call.\n   * @returns `false` if rate-limited, and `true` otherwise.\n   */\n  async call<ApiType extends keyof RateLimitedApis>(\n    origin: string,\n    type: ApiType,\n    ...args: Parameters<RateLimitedApis[ApiType]>\n  ): Promise<ReturnType<RateLimitedApis[ApiType]>> {\n    if (this.isRateLimited(type, origin)) {\n      throw ethErrors.rpc.limitExceeded({\n        message: `\"${type}\" is currently rate-limited. Please try again later.`,\n      });\n    }\n    this.recordRequest(type, origin);\n\n    const implementation = this.implementations[type];\n\n    if (!implementation) {\n      throw new Error('Invalid api type');\n    }\n\n    return implementation(...args);\n  }\n\n  /**\n   * Checks whether an origin is rate limited for the a specific API.\n   *\n   * @param api - The API the origin is trying to access.\n   * @param origin - The origin trying to access the API.\n   * @returns `true` if rate-limited, and `false` otherwise.\n   */\n  private isRateLimited(api: keyof RateLimitedApis, origin: string) {\n    return this.state.requests[api][origin] >= this.rateLimitCount;\n  }\n\n  /**\n   * Records that an origin has made a request to call an API, for rate-limiting purposes.\n   *\n   * @param api - The API the origin is trying to access.\n   * @param origin - The origin trying to access the API.\n   */\n  private recordRequest(api: keyof RateLimitedApis, origin: string) {\n    this.update((state) => {\n      const previous = (state as any).requests[api][origin] ?? 0;\n      (state as any).requests[api][origin] = previous + 1;\n\n      if (previous === 0) {\n        setTimeout(\n          () => this.resetRequestCount(api, origin),\n          this.rateLimitTimeout,\n        );\n      }\n    });\n  }\n\n  /**\n   * Resets the request count for a given origin and API combination, for rate-limiting purposes.\n   *\n   * @param api - The API in question.\n   * @param origin - The origin in question.\n   */\n  private resetRequestCount(api: keyof RateLimitedApis, origin: string) {\n    this.update((state) => {\n      (state as any).requests[api][origin] = 0;\n    });\n  }\n}\n"]}