{"version":3,"file":"crypto-compare.js","sourceRoot":"","sources":["../../src/apis/crypto-compare.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kCAAsC;AAEtC;;;;;;;;;;GAUG;AACH,SAAS,aAAa,CACpB,eAAuB,EACvB,cAAsB,EACtB,cAAwB;IAExB,OAAO,CACL,oDAAoD;QACpD,GAAG,cAAc,CAAC,WAAW,EAAE,UAAU,eAAe,CAAC,WAAW,EAAE,EAAE;QACxE,GAAG,cAAc,IAAI,eAAe,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAC7E,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,SAAsB,iBAAiB,CACrC,QAAgB,EAChB,cAAsB,EACtB,cAAwB;;QAKxB,MAAM,IAAI,GAAG,MAAM,IAAA,kBAAW,EAC5B,aAAa,CAAC,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC,CACxD,CAAC;QAEF;;;;;;;UAOE;QACF,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/B;QAED,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAE5D,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YACpC,MAAM,IAAI,KAAK,CACb,wBAAwB,QAAQ,CAAC,WAAW,EAAE,KAC5C,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAC7B,EAAE,CACH,CAAC;SACH;QAED,IAAI,cAAc,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,2CAA2C,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;SACxE;QAED,OAAO;YACL,cAAc;YACd,iBAAiB;SAClB,CAAC;IACJ,CAAC;CAAA;AA3CD,8CA2CC","sourcesContent":["import { handleFetch } from '../util';\n\n/**\n * Get the CryptoCompare API URL for getting the conversion rate from the given native currency to\n * the given currency. Optionally, the conversion rate from the native currency to USD can also be\n * included in the response.\n *\n * @param currentCurrency - The currency to get a conversion rate for.\n * @param nativeCurrency - The native currency to convert from.\n * @param includeUSDRate - Whether or not the native currency to USD conversion rate should be\n * included in the response as well.\n * @returns The API URL for getting the conversion rate.\n */\nfunction getPricingURL(\n  currentCurrency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n) {\n  return (\n    `https://min-api.cryptocompare.com/data/price?fsym=` +\n    `${nativeCurrency.toUpperCase()}&tsyms=${currentCurrency.toUpperCase()}` +\n    `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`\n  );\n}\n\n/**\n * Fetches the exchange rate for a given currency.\n *\n * @param currency - ISO 4217 currency code.\n * @param nativeCurrency - Symbol for base asset.\n * @param includeUSDRate - Whether to add the USD rate to the fetch.\n * @returns Promise resolving to exchange rate for given currency.\n */\nexport async function fetchExchangeRate(\n  currency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n): Promise<{\n  conversionRate: number;\n  usdConversionRate: number;\n}> {\n  const json = await handleFetch(\n    getPricingURL(currency, nativeCurrency, includeUSDRate),\n  );\n\n  /*\n  Example expected error response (if pair is not found)\n  {\n    Response: \"Error\",\n    Message: \"cccagg_or_exchange market does not exist for this coin pair (ETH-<NON_EXISTENT_TOKEN>)\",\n    HasWarning: false,\n  }\n  */\n  if (json.Response === 'Error') {\n    throw new Error(json.Message);\n  }\n\n  const conversionRate = Number(json[currency.toUpperCase()]);\n\n  const usdConversionRate = Number(json.USD);\n  if (!Number.isFinite(conversionRate)) {\n    throw new Error(\n      `Invalid response for ${currency.toUpperCase()}: ${\n        json[currency.toUpperCase()]\n      }`,\n    );\n  }\n\n  if (includeUSDRate && !Number.isFinite(usdConversionRate)) {\n    throw new Error(`Invalid response for usdConversionRate: ${json.USD}`);\n  }\n\n  return {\n    conversionRate,\n    usdConversionRate,\n  };\n}\n"]}