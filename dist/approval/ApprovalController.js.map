{"version":3,"file":"ApprovalController.js","sourceRoot":"","sources":["../../src/approval/ApprovalController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Patch } from 'immer';\nimport { EthereumRpcError, ethErrors } from 'eth-rpc-errors';\nimport { nanoid } from 'nanoid';\n\nimport { BaseController, Json } from '../BaseControllerV2';\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\n\nconst controllerName = 'ApprovalController';\n\ntype ApprovalPromiseResolve = (value?: unknown) => void;\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  /**\n   * The ID of the approval request.\n   */\n  id: string;\n\n  /**\n   * The origin of the approval request.\n   */\n  origin: string;\n\n  /**\n   * The time that the request was received, per Date.now().\n   */\n  time: number;\n\n  /**\n   * The type of the approval request.\n   */\n  type: string;\n\n  /**\n   * Additional data associated with the request.\n   * TODO:TS4.4 make optional\n   */\n  requestData: RequestData;\n};\n\ntype ShowApprovalRequest = () => void | Promise<void>;\n\nexport type ApprovalControllerState = {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n};\n\nconst stateMetadata = {\n  pendingApprovals: { persist: false, anonymous: true },\n  pendingApprovalCount: { persist: false, anonymous: false },\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nconst getDefaultState = (): ApprovalControllerState => {\n  return {\n    pendingApprovals: {},\n    pendingApprovalCount: 0,\n  };\n};\n\nexport type GetApprovalsState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => ApprovalControllerState;\n};\n\nexport type ClearApprovalRequests = {\n  type: `${typeof controllerName}:clearRequests`;\n  handler: (error: EthereumRpcError<unknown>) => void;\n};\n\ntype AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n};\n\nexport type AddApprovalRequest = {\n  type: `${typeof controllerName}:addRequest`;\n  handler: (\n    opts: AddApprovalOptions,\n    shouldShowRequest: boolean,\n  ) => ReturnType<ApprovalController['add']>;\n};\n\nexport type HasApprovalRequest = {\n  type: `${typeof controllerName}:hasRequest`;\n  handler: ApprovalController['has'];\n};\n\nexport type AcceptRequest = {\n  type: `${typeof controllerName}:acceptRequest`;\n  handler: ApprovalController['accept'];\n};\n\nexport type RejectRequest = {\n  type: `${typeof controllerName}:rejectRequest`;\n  handler: ApprovalController['reject'];\n};\n\nexport type ApprovalControllerActions =\n  | GetApprovalsState\n  | ClearApprovalRequests\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptRequest\n  | RejectRequest;\n\nexport type ApprovalStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [ApprovalControllerState, Patch[]];\n};\n\nexport type ApprovalControllerEvents = ApprovalStateChange;\n\nexport type ApprovalControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ApprovalControllerActions,\n  ApprovalControllerEvents,\n  never,\n  never\n>;\n\ntype ApprovalControllerOptions = {\n  messenger: ApprovalControllerMessenger;\n  showApprovalRequest: ShowApprovalRequest;\n  state?: Partial<ApprovalControllerState>;\n};\n\n/**\n * Controller for managing requests that require user approval.\n *\n * Enables limiting the number of pending requests by origin and type, counting\n * pending requests, and more.\n *\n * Adding a request returns a promise that resolves or rejects when the request\n * is approved or denied, respectively.\n */\nexport class ApprovalController extends BaseController<\n  typeof controllerName,\n  ApprovalControllerState,\n  ApprovalControllerMessenger\n> {\n  private _approvals: Map<string, ApprovalCallbacks>;\n\n  private _origins: Map<string, Set<string>>;\n\n  private _showApprovalRequest: () => void;\n\n  /**\n   * Construct an Approval controller.\n   *\n   * @param options - The controller options.\n   * @param options.showApprovalRequest - Function for opening the UI such that\n   * the request can be displayed to the user.\n   * @param options.messenger - The restricted controller messenger for the Approval controller.\n   * @param options.state - The initial controller state.\n   */\n  constructor({\n    messenger,\n    showApprovalRequest,\n    state = {},\n  }: ApprovalControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this._approvals = new Map();\n    this._origins = new Map();\n    this._showApprovalRequest = showApprovalRequest;\n    this.registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearRequests` as const,\n      this.clear.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:addRequest` as const,\n      (opts: AddApprovalOptions, shouldShowRequest: boolean) => {\n        if (shouldShowRequest) {\n          return this.addAndShowApprovalRequest(opts);\n        }\n        return this.add(opts);\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasRequest` as const,\n      this.has.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:acceptRequest` as const,\n      this.accept.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:rejectRequest` as const,\n      this.reject.bind(this),\n    );\n  }\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise.\n   */\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown> {\n    const promise = this._add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n    );\n    this._showApprovalRequest();\n    return promise;\n  }\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise.\n   */\n  add(opts: AddApprovalOptions): Promise<unknown> {\n    return this._add(opts.origin, opts.type, opts.id, opts.requestData);\n  }\n\n  /**\n   * Gets the info for the approval request with the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The approval request data associated with the id.\n   */\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.state.pendingApprovals[id];\n  }\n\n  /**\n   * Gets the number of pending approvals, by origin and/or type.\n   *\n   * If only `origin` is specified, all approvals for that origin will be\n   * counted, regardless of type.\n   * If only `type` is specified, all approvals for that type will be counted,\n   * regardless of origin.\n   * If both `origin` and `type` are specified, 0 or 1 will be returned.\n   *\n   * @param opts - The approval count options.\n   * @param opts.origin - An approval origin.\n   * @param opts.type - The type of the approval request.\n   * @returns The current approval request count for the given origin and/or\n   * type.\n   */\n  getApprovalCount(opts: { origin?: string; type?: string } = {}): number {\n    if (!opts.origin && !opts.type) {\n      throw new Error('Must specify origin, type, or both.');\n    }\n    const { origin, type: _type } = opts;\n\n    if (origin && _type) {\n      return Number(Boolean(this._origins.get(origin)?.has(_type)));\n    }\n\n    if (origin) {\n      return this._origins.get(origin)?.size || 0;\n    }\n\n    // Only \"type\" was specified\n    let count = 0;\n    for (const approval of Object.values(this.state.pendingApprovals)) {\n      if (approval.type === _type) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the total count of all pending approval requests for all origins.\n   *\n   * @returns The total pending approval request count.\n   */\n  getTotalApprovalCount(): number {\n    return this.state.pendingApprovalCount;\n  }\n\n  /**\n   * Checks if there's a pending approval request per the given parameters.\n   * At least one parameter must be specified. An error will be thrown if the\n   * parameters are invalid.\n   *\n   * If `id` is specified, all other parameters will be ignored.\n   * If `id` is not specified, the method will check for requests that match\n   * all of the specified parameters.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The ID to check for.\n   * @param opts.origin - The origin to check for.\n   * @param opts.type - The type to check for.\n   * @returns `true` if a matching approval is found, and `false` otherwise.\n   */\n  has(opts: { id?: string; origin?: string; type?: string } = {}): boolean {\n    const { id, origin, type: _type } = opts;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        throw new Error('May not specify non-string id.');\n      }\n      return this._approvals.has(id);\n    }\n\n    if (_type && typeof _type !== 'string') {\n      throw new Error('May not specify non-string type.');\n    }\n\n    if (origin) {\n      if (typeof origin !== 'string') {\n        throw new Error('May not specify non-string origin.');\n      }\n\n      // Check origin and type pair if type also specified\n      if (_type) {\n        return Boolean(this._origins.get(origin)?.has(_type));\n      }\n      return this._origins.has(origin);\n    }\n\n    if (_type) {\n      for (const approval of Object.values(this.state.pendingApprovals)) {\n        if (approval.type === _type) {\n          return true;\n        }\n      }\n      return false;\n    }\n    throw new Error(\n      'Must specify a valid combination of id, origin, and type.',\n    );\n  }\n\n  /**\n   * Resolves the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param value - The value to resolve the approval promise with.\n   */\n  accept(id: string, value?: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).resolve(value);\n  }\n\n  /**\n   * Rejects the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param error - The error to reject the approval promise with.\n   */\n  reject(id: string, error: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  /**\n   * Rejects and deletes all approval requests.\n   *\n   * @param rejectionError - The EthereumRpcError to reject the approval\n   * requests with.\n   */\n  clear(rejectionError: EthereumRpcError<unknown>): void {\n    for (const id of this._approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this._origins.clear();\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Implementation of add operation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param id - The id of the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @returns The approval promise.\n   */\n  private _add(\n    origin: string,\n    type: string,\n    id: string = nanoid(),\n    requestData?: Record<string, Json>,\n  ): Promise<unknown> {\n    this._validateAddParams(id, origin, type, requestData);\n\n    if (this._origins.get(origin)?.has(type)) {\n      throw ethErrors.rpc.resourceUnavailable(\n        getAlreadyPendingMessage(origin, type),\n      );\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this._approvals.set(id, { resolve, reject });\n      this._addPendingApprovalOrigin(origin, type);\n      this._addToStore(id, origin, type, requestData);\n    });\n  }\n\n  /**\n   * Validates parameters to the add method.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   */\n  private _validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this._approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (\n      requestData &&\n      (typeof requestData !== 'object' || Array.isArray(requestData))\n    ) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw ethErrors.rpc.internal(errorMessage);\n    }\n  }\n\n  /**\n   * Adds an entry to _origins.\n   * Performs no validation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   */\n  private _addPendingApprovalOrigin(origin: string, type: string): void {\n    const originSet = this._origins.get(origin) || new Set();\n    originSet.add(type);\n\n    if (!this._origins.has(origin)) {\n      this._origins.set(origin, originSet);\n    }\n  }\n\n  /**\n   * Adds an entry to the store.\n   * Performs no validation.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   */\n  private _addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n  ): void {\n    const approval: ApprovalRequest<Record<string, Json> | null> = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n    };\n\n    this.update((draftState) => {\n      // Typecast: ts(2589)\n      draftState.pendingApprovals[id] = approval as any;\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Deletes the approval with the given id. The approval promise must be\n   * resolved or reject before this method is called.\n   * Deletion is an internal operation because approval state is solely\n   * managed by this controller.\n   *\n   * @param id - The id of the approval request to be deleted.\n   */\n  private _delete(id: string): void {\n    this._approvals.delete(id);\n\n    // This method is only called after verifying that the approval with the\n    // specified id exists.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { origin, type } = this.state.pendingApprovals[id]!;\n\n    (this._origins.get(origin) as Set<string>).delete(type);\n    if (this._isEmptyOrigin(origin)) {\n      this._origins.delete(origin);\n    }\n\n    this.update((draftState) => {\n      delete draftState.pendingApprovals[id];\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Gets the approval callbacks for the given id, deletes the entry, and then\n   * returns the callbacks for promise resolution.\n   * Throws an error if no approval is found for the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The promise callbacks associated with the approval request.\n   */\n  private _deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this._approvals.get(id);\n    if (!callbacks) {\n      throw new Error(`Approval request with id '${id}' not found.`);\n    }\n\n    this._delete(id);\n    return callbacks;\n  }\n\n  /**\n   * Checks whether there are any approvals associated with the given\n   * origin.\n   *\n   * @param origin - The origin to check.\n   * @returns True if the origin has no approvals, false otherwise.\n   */\n  private _isEmptyOrigin(origin: string): boolean {\n    return !this._origins.get(origin)?.size;\n  }\n}\nexport default ApprovalController;\n"]}