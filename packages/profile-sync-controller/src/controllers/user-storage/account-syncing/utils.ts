import { KeyringTypes } from '@metamask/keyring-controller';
import type { InternalAccount } from '@metamask/keyring-internal-api';

import {
  USER_STORAGE_VERSION_KEY,
  USER_STORAGE_VERSION,
  LOCALIZED_DEFAULT_ACCOUNT_NAMES,
} from './constants';
import type { UserStorageAccount } from './types';

/**
 * Tells if the given name is a default account name.
 * Default account names are localized names that are automatically generated by the clients.
 *
 * @param name - the name to check
 * @returns true if the name is a default account name, false otherwise
 */

export const isNameDefaultAccountName = (name: string) => {
  return LOCALIZED_DEFAULT_ACCOUNT_NAMES.some((prefix) => {
    return new RegExp(`^${prefix} ([0-9]+)$`, 'u').test(name);
  });
};

/**
 * Map an internal account to a user storage account
 * @param internalAccount - An internal account
 * @returns A user storage account
 */
export const mapInternalAccountToUserStorageAccount = (
  internalAccount: InternalAccount,
): UserStorageAccount => {
  const { address, id, metadata } = internalAccount;
  const { name, nameLastUpdatedAt } = metadata;

  return {
    [USER_STORAGE_VERSION_KEY]: USER_STORAGE_VERSION,
    a: address,
    i: id,
    n: name,
    ...(isNameDefaultAccountName(name) ? {} : { nlu: nameLastUpdatedAt }),
  };
};

/**
 * Checks if the given internal account has the correct keyring type.
 * @param account - The internal account to check
 * @returns Returns true if the internal account has the correct keyring type, false otherwise.
 */
export function doesInternalAccountHaveCorrectKeyringType(
  account: InternalAccount,
) {
  return account.metadata.keyring.type === KeyringTypes.hd;
}
