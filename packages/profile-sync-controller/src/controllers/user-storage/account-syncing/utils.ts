import { KeyringTypes } from '@metamask/keyring-controller';
import type { InternalAccount } from '@metamask/keyring-internal-api';

import {
  USER_STORAGE_VERSION_KEY,
  USER_STORAGE_VERSION,
  LOCALIZED_DEFAULT_ACCOUNT_NAMES,
} from './constants';
import type { AccountSyncingOptions, UserStorageAccount } from './types';

/**
 * Tells if the given name is a default account name.
 * Default account names are localized names that are automatically generated by the clients.
 *
 * @param name - the name to check
 * @returns true if the name is a default account name, false otherwise
 */

export const isNameDefaultAccountName = (name: string) => {
  return LOCALIZED_DEFAULT_ACCOUNT_NAMES.some((prefix) => {
    return new RegExp(`^${prefix} ([0-9]+)$`, 'u').test(name);
  });
};

/**
 * Map an internal account to a user storage account
 *
 * @param internalAccount - An internal account
 * @returns A user storage account
 */
export const mapInternalAccountToUserStorageAccount = (
  internalAccount: InternalAccount,
): UserStorageAccount => {
  const { address, id, metadata } = internalAccount;
  const { name, nameLastUpdatedAt } = metadata;

  return {
    [USER_STORAGE_VERSION_KEY]: USER_STORAGE_VERSION,
    a: address,
    i: id,
    n: name,
    ...(isNameDefaultAccountName(name) ? {} : { nlu: nameLastUpdatedAt }),
  };
};

/**
 * Transforms a list of any internal accounts to a list of internal accounts that
 * have the correct keyring type and are from the primary SRP.
 *
 * @param internalAccountsList - The list of internal accounts
 * @param options - Parameters used for checking if the internal account is from the primary SRP
 * @returns Returns a list of internal accounts that have the correct keyring type and are from the primary SRP.
 */
export async function mapInternalAccountsListToPrimarySRPHdKeyringInternalAccountsList(
  internalAccountsList: InternalAccount[],
  options: AccountSyncingOptions,
): Promise<InternalAccount[]> {
  const { getMessenger } = options;

  const primarySRPHdKeyringAccountsAddresses = (await getMessenger().call(
    'KeyringController:withKeyring',
    {
      type: KeyringTypes.hd,
      index: 0,
    },
    async (keyring) => {
      return await keyring.getAccounts();
    },
  )) as string[];

  return internalAccountsList.filter((account) =>
    primarySRPHdKeyringAccountsAddresses?.includes(account.address),
  );
}

/**
 * Checks if the given internal account is from the primary SRP and is from the HD keyring.
 *
 * @param account - The internal account to check
 * @param options - Parameters used for checking if the internal account is from the primary SRP
 * @returns Returns true if the internal account is from the primary SRP, false otherwise.
 */
export async function isInternalAccountFromPrimarySRPHdKeyring(
  account: InternalAccount,
  options: AccountSyncingOptions,
): Promise<boolean> {
  if (account.metadata.keyring.type !== KeyringTypes.hd) {
    return false;
  }

  const { getMessenger } = options;

  const primarySRPHdKeyringAccountsAddresses = (await getMessenger().call(
    'KeyringController:withKeyring',
    {
      type: KeyringTypes.hd,
      index: 0,
    },
    async (keyring) => {
      return await keyring.getAccounts();
    },
  )) as string[];

  return primarySRPHdKeyringAccountsAddresses.includes(account.address);
}
