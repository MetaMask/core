import type { InternalAccount } from '@metamask/keyring-api';

import {
  USER_STORAGE_VERSION_KEY,
  USER_STORAGE_VERSION,
  LOCALIZED_DEFAULT_ACCOUNT_NAMES,
} from './constants';

export type UserStorageAccount = {
  /**
   * The Version 'v' of the User Storage.
   * NOTE - will allow us to support upgrade/downgrades in the future
   */
  [USER_STORAGE_VERSION_KEY]: typeof USER_STORAGE_VERSION;
  /** the id 'i' of the account */
  i: string;
  /** the address 'a' of the account */
  a: string;
  /** the name 'n' of the account */
  n: string;
  /** the nameLastUpdatedAt timestamp 'nlu' of the account */
  nlu?: number;
};

/**
 * Tells if the given name is a default account name.
 * Default account names are localized names that are automatically generated by the clients.
 *
 * @param name - the name to check
 * @returns true if the name is a default account name, false otherwise
 */

export const isNameDefaultAccountName = (name: string) => {
  return LOCALIZED_DEFAULT_ACCOUNT_NAMES.some((prefix) => {
    return new RegExp(`^${prefix} ([0-9]+)$`, 'u').test(name);
  });
};

/**
 * Map an internal account to a user storage account
 * @param internalAccount - An internal account
 * @returns A user storage account
 */
export const mapInternalAccountToUserStorageAccount = (
  internalAccount: InternalAccount,
): UserStorageAccount => {
  const { address, id, metadata } = internalAccount;
  return {
    [USER_STORAGE_VERSION_KEY]: USER_STORAGE_VERSION,
    a: address,
    i: id,
    n: metadata.name,
    nlu: metadata.nameLastUpdatedAt,
  };
};
