import type { InternalAccount } from '@metamask/keyring-api';

import {
  USER_STORAGE_VERSION_KEY,
  USER_STORAGE_VERSION,
  LOCALIZED_DEFAULT_ACCOUNT_NAMES,
} from './constants';

export type UserStorageAccountsListAccount = {
  /** the id 'i' of the account */
  i: string;
  /** the address 'a' of the account */
  a: string;
  /** the name 'n' of the account */
  n: string;
  /** the nameLastUpdatedAt timestamp 'nlu' of the account */
  nlu?: number;
};

export type UserStorageAccountsList = UserStorageAccountsListAccount[];

export type UserStorageAccountsListPayload = {
  /**
   * The Version 'v' of the User Storage.
   * NOTE - will allow us to support upgrade/downgrades in the future
   */
  [USER_STORAGE_VERSION_KEY]: typeof USER_STORAGE_VERSION;
  /** the list 'l' of UserStorageAccountsListAccount */
  l: UserStorageAccountsList;
};

/**
 * Creates a UserStorageAccountsListPayload from various params.
 *
 * @param accountsList - the UserStorageAccountsList to format
 * @returns the formatted UserStorageAccountsListPayload
 */
export const formatUserStorageAccountsListPayload = (
  accountsList: UserStorageAccountsListAccount[],
) => {
  return {
    [USER_STORAGE_VERSION_KEY]: USER_STORAGE_VERSION,
    l: accountsList,
  };
};

/**
 * Extracts the UserStorageAccountsList from a response string.
 *
 * @param response - the response string to extract the UserStorageAccountsList from
 * @returns the extracted UserStorageAccountsList
 */
export const extractUserStorageAccountsListFromResponse = (
  response: string | null,
) => {
  if (!response) {
    return null;
  }
  const userStorageContents = JSON.parse(
    response,
  ) as UserStorageAccountsListPayload;
  return userStorageContents.l;
};

/**
 * Tells if the given name is a default account name.
 * Default account names are localized names that are automatically generated by the clients.
 *
 * @param name - the name to check
 * @returns true if the name is a default account name, false otherwise
 */

export const isNameDefaultAccountName = (name: string) => {
  return LOCALIZED_DEFAULT_ACCOUNT_NAMES.some((prefix) => {
    return new RegExp(`^${prefix} ([0-9]+)$`, 'u').test(name);
  });
};

/**
 *
 * Maps an InternalAccount list to a UserStorageAccountsList.
 *
 * @param internalAccountsList - the InternalAccount list to map
 * @returns the UserStorageAccountsList
 */
export const mapInternalAccountsListToUserStorageAccountsList = (
  internalAccountsList: InternalAccount[],
): UserStorageAccountsList => {
  console.log({ internalAccountsList });
  return internalAccountsList.map((internalAccount) => ({
    a: internalAccount.address,
    i: internalAccount.id,
    n: internalAccount.metadata.name,
    ...(internalAccount.metadata.nameLastUpdatedAt && {
      nlu: internalAccount.metadata.nameLastUpdatedAt,
    }),
  }));
};
