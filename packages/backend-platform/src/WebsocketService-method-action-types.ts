/**
 * This file is auto generated by `scripts/generate-method-action-types.ts`.
 * Do not edit manually.
 */

import type { WebSocketService } from './WebsocketService';

/**
 * Establishes WebSocket connection
 *
 * @returns Promise that resolves when connection is established
 */
export type WebSocketServiceConnectAction = {
  type: `WebSocketService:connect`;
  handler: WebSocketService['connect'];
};

/**
 * Closes WebSocket connection
 *
 * @returns Promise that resolves when disconnection is complete
 */
export type WebSocketServiceDisconnectAction = {
  type: `WebSocketService:disconnect`;
  handler: WebSocketService['disconnect'];
};

/**
 * Sends a message through the WebSocket
 *
 * @param message - The message to send
 * @returns Promise that resolves when message is sent
 */
export type WebSocketServiceSendMessageAction = {
  type: `WebSocketService:sendMessage`;
  handler: WebSocketService['sendMessage'];
};

/**
 * Sends a request and waits for a correlated response
 *
 * @param message - The request message
 * @returns Promise that resolves with the response data
 */
export type WebSocketServiceSendRequestAction = {
  type: `WebSocketService:sendRequest`;
  handler: WebSocketService['sendRequest'];
};

/**
 * Gets current connection information
 *
 * @returns Current connection status and details
 */
export type WebSocketServiceGetConnectionInfoAction = {
  type: `WebSocketService:getConnectionInfo`;
  handler: WebSocketService['getConnectionInfo'];
};

/**
 * Gets subscription information for a specific channel
 *
 * @param channel - The channel name to look up
 * @returns Subscription details or undefined if not found
 */
export type WebSocketServiceGetSubscriptionByChannelAction = {
  type: `WebSocketService:getSubscriptionByChannel`;
  handler: WebSocketService['getSubscriptionByChannel'];
};

/**
 * Checks if a channel is currently subscribed
 *
 * @param channel - The channel name to check
 * @returns True if the channel is subscribed, false otherwise
 */
export type WebSocketServiceIsChannelSubscribedAction = {
  type: `WebSocketService:isChannelSubscribed`;
  handler: WebSocketService['isChannelSubscribed'];
};

/**
 * Register a callback for specific channels
 *
 * @param options - Channel callback configuration
 * @param options.channelName - Channel name to match exactly
 * @param options.callback - Function to call when channel matches
 * @returns Channel name (used as callback ID)
 *
 * @example
 * ```typescript
 * // Listen to specific account activity channel
 * const channelName = webSocketService.addChannelCallback({
 * channelName: 'account-activity.v1.eip155:0:0x1234...',
 * callback: (notification) => {
 * console.log('Account activity:', notification.data);
 * }
 * });
 *
 * // Listen to system notifications channel
 * const systemChannelName = webSocketService.addChannelCallback({
 * channelName: 'system-notifications.v1',
 * callback: (notification) => {
 * console.log('System notification:', notification.data);
 * }
 * });
 * ```
 */
export type WebSocketServiceAddChannelCallbackAction = {
  type: `WebSocketService:addChannelCallback`;
  handler: WebSocketService['addChannelCallback'];
};

/**
 * Remove a channel callback
 *
 * @param channelName - The channel name returned from addChannelCallback
 * @returns True if callback was found and removed, false otherwise
 */
export type WebSocketServiceRemoveChannelCallbackAction = {
  type: `WebSocketService:removeChannelCallback`;
  handler: WebSocketService['removeChannelCallback'];
};

/**
 * Get all registered channel callbacks (for debugging)
 */
export type WebSocketServiceGetChannelCallbacksAction = {
  type: `WebSocketService:getChannelCallbacks`;
  handler: WebSocketService['getChannelCallbacks'];
};

/**
 * Union of all WebSocketService action types.
 */
export type WebSocketServiceMethodActions =
  | WebSocketServiceConnectAction
  | WebSocketServiceDisconnectAction
  | WebSocketServiceSendMessageAction
  | WebSocketServiceSendRequestAction
  | WebSocketServiceGetConnectionInfoAction
  | WebSocketServiceGetSubscriptionByChannelAction
  | WebSocketServiceIsChannelSubscribedAction
  | WebSocketServiceAddChannelCallbackAction
  | WebSocketServiceRemoveChannelCallbackAction
  | WebSocketServiceGetChannelCallbacksAction;
