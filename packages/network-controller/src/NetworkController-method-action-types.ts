/**
 * This file is auto generated by `scripts/generate-method-action-types.ts`.
 * Do not edit manually.
 */

import type { NetworkController } from './NetworkController';

/**
 * Accesses the provider and block tracker for the currently selected network.
 *
 * @returns an object with the provider and block tracker proxies for the currently selected network.
 */
export type NetworkControllerGetSelectedNetworkClientAction = {
  type: `NetworkController:getSelectedNetworkClient`;
  handler: NetworkController['getSelectedNetworkClient'];
};

/**
 * Accesses the chain ID from the selected network client.
 *
 * @returns The chain ID of the selected network client in hex format or undefined if there is no network client.
 */
export type NetworkControllerGetSelectedChainIdAction = {
  type: `NetworkController:getSelectedChainId`;
  handler: NetworkController['getSelectedChainId'];
};

/**
 * Returns the Infura network client with the given ID.
 *
 * @param infuraNetworkClientId - An Infura network client ID.
 * @returns The Infura network client.
 * @throws If an Infura network client does not exist with the given ID.
 */
export type NetworkControllerGetNetworkClientByIdAction = {
  type: `NetworkController:getNetworkClientById`;
  handler: NetworkController['getNetworkClientById'];
};

/**
 * Convenience method to update provider network type settings.
 *
 * @param type - Human readable network name.
 * @deprecated This has been replaced by `setActiveNetwork`, and will be
 * removed in a future release
 */
export type NetworkControllerSetProviderTypeAction = {
  type: `NetworkController:setProviderType`;
  handler: NetworkController['setProviderType'];
};

/**
 * Changes the selected network.
 *
 * @param networkClientId - The ID of a network client that will be used to
 * make requests.
 * @param options - Options for this method.
 * @param options.updateState - Allows for updating state.
 * @throws if no network client is associated with the given
 * network client ID.
 */
export type NetworkControllerSetActiveNetworkAction = {
  type: `NetworkController:setActiveNetwork`;
  handler: NetworkController['setActiveNetwork'];
};

/**
 * Determines whether the network supports EIP-1559 by checking whether the
 * latest block has a `baseFeePerGas` property, then updates state
 * appropriately.
 *
 * @param networkClientId - The networkClientId to fetch the correct provider against which to check 1559 compatibility.
 * @returns A promise that resolves to true if the network supports EIP-1559
 * , false otherwise, or `undefined` if unable to determine the compatibility.
 */
export type NetworkControllerGetEIP1559CompatibilityAction = {
  type: `NetworkController:getEIP1559Compatibility`;
  handler: NetworkController['getEIP1559Compatibility'];
};

/**
 * Returns the network configuration that has been filed under the given chain
 * ID.
 *
 * @param chainId - The chain ID to use as a key.
 * @returns The network configuration if one exists, or undefined.
 */
export type NetworkControllerGetNetworkConfigurationByChainIdAction = {
  type: `NetworkController:getNetworkConfigurationByChainId`;
  handler: NetworkController['getNetworkConfigurationByChainId'];
};

/**
 * Returns the network configuration that contains an RPC endpoint with the
 * given network client ID.
 *
 * @param networkClientId - The network client ID to use as a key.
 * @returns The network configuration if one exists, or undefined.
 */
export type NetworkControllerGetNetworkConfigurationByNetworkClientIdAction = {
  type: `NetworkController:getNetworkConfigurationByNetworkClientId`;
  handler: NetworkController['getNetworkConfigurationByNetworkClientId'];
};

/**
 * Creates and registers network clients for the collection of Infura and
 * custom RPC endpoints that can be used to make requests for a particular
 * chain, storing the given configuration object in state for later reference.
 *
 * @param fields - The object that describes the new network/chain and lists
 * the RPC endpoints which front that chain.
 * @returns The newly added network configuration.
 * @throws if any part of `fields` would produce invalid state.
 * @see {@link NetworkConfiguration}
 */
export type NetworkControllerAddNetworkAction = {
  type: `NetworkController:addNetwork`;
  handler: NetworkController['addNetwork'];
};

/**
 * Updates the configuration for a previously stored network filed under the
 * given chain ID, creating + registering new network clients to represent RPC
 * endpoints that have been added and destroying + unregistering existing
 * network clients for RPC endpoints that have been removed.
 *
 * Note that if `chainId` is changed, then all network clients associated with
 * that chain will be removed and re-added, even if none of the RPC endpoints
 * have changed.
 *
 * @param chainId - The chain ID associated with an existing network.
 * @param fields - The object that describes the updates to the network/chain,
 * including the new set of RPC endpoints which should front that chain.
 * @param options - Options to provide.
 * @param options.replacementSelectedRpcEndpointIndex - Usually you cannot
 * remove an RPC endpoint that is being represented by the currently selected
 * network client. This option allows you to specify another RPC endpoint
 * (either an existing one or a new one) that should be used to select a new
 * network instead.
 * @returns The updated network configuration.
 * @throws if `chainId` does not refer to an existing network configuration,
 * if any part of `fields` would produce invalid state, etc.
 * @see {@link NetworkConfiguration}
 */
export type NetworkControllerUpdateNetworkAction = {
  type: `NetworkController:updateNetwork`;
  handler: NetworkController['updateNetwork'];
};

/**
 * Destroys and unregisters the network identified by the given chain ID, also
 * removing the associated network configuration from state.
 *
 * @param chainId - The chain ID associated with an existing network.
 * @throws if `chainId` does not refer to an existing network configuration,
 * or if the currently selected network is being removed.
 * @see {@link NetworkConfiguration}
 */
export type NetworkControllerRemoveNetworkAction = {
  type: `NetworkController:removeNetwork`;
  handler: NetworkController['removeNetwork'];
};

/**
 * Searches for the default RPC endpoint configured for the given chain and
 * returns its network client ID. This can then be passed to
 * {@link getNetworkClientById} to retrieve the network client.
 *
 * @param chainId - Chain ID to search for.
 * @returns The ID of the network client created for the chain's default RPC
 * endpoint.
 */
export type NetworkControllerFindNetworkClientIdByChainIdAction = {
  type: `NetworkController:findNetworkClientIdByChainId`;
  handler: NetworkController['findNetworkClientIdByChainId'];
};

/**
 * Union of all NetworkController action types.
 */
export type NetworkControllerMethodActions =
  | NetworkControllerGetSelectedNetworkClientAction
  | NetworkControllerGetSelectedChainIdAction
  | NetworkControllerGetNetworkClientByIdAction
  | NetworkControllerSetProviderTypeAction
  | NetworkControllerSetActiveNetworkAction
  | NetworkControllerGetEIP1559CompatibilityAction
  | NetworkControllerGetNetworkConfigurationByChainIdAction
  | NetworkControllerGetNetworkConfigurationByNetworkClientIdAction
  | NetworkControllerAddNetworkAction
  | NetworkControllerUpdateNetworkAction
  | NetworkControllerRemoveNetworkAction
  | NetworkControllerFindNetworkClientIdByChainIdAction;
