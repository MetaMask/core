/* eslint-disable jsdoc/tag-lines */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Script: `npx openapi-typescript <PATH TO NOTIFICATION API SPEC> -o ./schema.d.ts`
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/api/v1/orders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new trading order
     * @description Creates a new trading order for a specific user.
     *
     * Supports optional stop-loss (sl_price) and take-profit (tp_price) levels.
     *
     * **Authentication Required**: This endpoint requires JWT authentication.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['OrderInput'];
        };
      };
      responses: {
        /** @description Order successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid request - malformed JSON or missing required fields */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized - invalid or missing JWT token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    OrderInput: {
      /**
       * @description User's Ethereum address
       * @example 0x1234567890abcdef1234567890abcdef12345678
       */
      user_id: string;
      /**
       * @description Coin symbol (e.g., BTC, ETH, DOGE)
       * @example BTC
       */
      coin: string;
      /**
       * Format: double
       * @description Optional stop-loss price level
       * @example 45000.5
       */
      sl_price?: number;
      /**
       * Format: double
       * @description Optional take-profit price level
       * @example 55000.75
       */
      tp_price?: number;
    };
    Error: {
      /**
       * @description Human-readable error message
       * @example Invalid request format
       */
      message?: string;
      /**
       * @description Technical error details
       * @example validation error
       */
      error?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
