/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Script: `npx openapi-typescript <PATH TO NOTIFICATION API SPEC> -o ./schema.d.ts`
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/api/v1/notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all notifications ordered by most recent */
    post: {
      parameters: {
        query?: {
          /** @description Page number for pagination */
          page?: number;
          /** @description Number of notifications per page for pagination */
          per_page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            trigger_ids: string[];
            chain_ids?: number[];
            kinds?: string[];
            unread?: boolean;
          };
        };
      };
      responses: {
        /** @description Successfully fetched a list of notifications */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Notification'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/notifications/mark-as-read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mark notifications as read */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            ids?: string[];
          };
        };
      };
      responses: {
        /** @description Successfully marked notifications as read */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/internal/v1/topics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all topics created (internal) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully fetched all topics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Topic'][];
          };
        };
      };
    };
    put?: never;
    /** Create a new topic (internal) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            name: string;
            desc?: string;
          };
        };
      };
      responses: {
        /** @description Successfully created a new topic */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/internal/v1/subtopics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all sub-topics created (internal) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully fetched all subtopics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubTopic'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/internal/v1/global-notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Insert a new Global Notification (internal) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['GlobalNotificationWrite'];
        };
      };
      responses: {
        /** @description Successfully created a new global notification */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/global-notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all Global Notifications for a UserID */
    get: {
      parameters: {
        query: {
          /** @description Platform(s) to filter notifications by */
          platform: ('portfolio' | 'extension' | 'mobile')[];
          /** @description Delivery channel(s) to filter notifications by */
          deliveryChannel: ('inbox' | 'push')[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully fetched global notifications */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GlobalNotification'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/user-preferences': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all preferences for a UserID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully fetched preferences */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Topic'][];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Update Preferences for a UserID */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            topics: string[];
          };
        };
      };
      responses: {
        /** @description Successfully updated topics preferences */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    GlobalNotification: {
      title: string;
      body: string;
      /** Format: date-time */
      created_at: string;
    };
    GlobalNotificationWrite: {
      title: string;
      body: string;
      'sub-topic': string;
      platforms: ('portfolio' | 'extension' | 'mobile')[];
      delivery_channels: ('inbox' | 'push')[];
    };
    Topic: {
      name: string;
      description?: string;
      /** Format: date-time */
      created_at?: string;
    };
    SubTopic: {
      name: string;
      /** Format: date-time */
      created_at?: string;
    };
    Notification: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      trigger_id: string;
      /** @example 1 */
      chain_id: number;
      /** @example 17485840 */
      block_number?: number;
      block_timestamp?: string;
      /**
       * Format: address
       * @example 0x881D40237659C251811CEC9c364ef91dC08D300C
       */
      tx_hash?: string;
      /** @example false */
      unread: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: address */
      address: string;
      data?:
        | components['schemas']['Data_MetamaskSwapCompleted']
        | components['schemas']['Data_LidoStakeReadyToBeWithdrawn']
        | components['schemas']['Data_LidoStakeCompleted']
        | components['schemas']['Data_LidoWithdrawalRequested']
        | components['schemas']['Data_LidoWithdrawalCompleted']
        | components['schemas']['Data_RocketPoolStakeCompleted']
        | components['schemas']['Data_RocketPoolUnstakeCompleted']
        | components['schemas']['Data_ETHSent']
        | components['schemas']['Data_ETHReceived']
        | components['schemas']['Data_ERC20Sent']
        | components['schemas']['Data_ERC20Received']
        | components['schemas']['Data_ERC721Sent']
        | components['schemas']['Data_ERC721Received']
        | components['schemas']['Data_ERC1155Sent']
        | components['schemas']['Data_ERC1155Received']
        | components['schemas']['Data_AaveV3HealthFactor']
        | components['schemas']['Data_EnsExpiration']
        | components['schemas']['Data_LidoStakingRewards']
        | components['schemas']['Data_RocketpoolStakingRewards']
        | components['schemas']['Data_NotionalLoanExpiration']
        | components['schemas']['Data_SparkFiHealthFactor'];
    };
    Data_MetamaskSwapCompleted: {
      /** @enum {string} */
      kind: 'metamask_swap_completed';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: decimal */
      rate: string;
      token_in: components['schemas']['Token'];
      token_out: components['schemas']['Token'];
    };
    Data_LidoStakeCompleted: {
      /** @enum {string} */
      kind: 'lido_stake_completed';
      network_fee: components['schemas']['NetworkFee'];
      stake_in: components['schemas']['Stake'];
      stake_out: components['schemas']['Stake'];
    };
    Data_LidoWithdrawalRequested: {
      /** @enum {string} */
      kind: 'lido_withdrawal_requested';
      network_fee: components['schemas']['NetworkFee'];
      stake_in: components['schemas']['Stake'];
      stake_out: components['schemas']['Stake'];
    };
    Data_LidoStakeReadyToBeWithdrawn: {
      /** @enum {string} */
      kind: 'lido_stake_ready_to_be_withdrawn';
      /** Format: decimal */
      request_id: string;
      staked_eth: components['schemas']['Stake'];
    };
    Data_LidoWithdrawalCompleted: {
      /** @enum {string} */
      kind: 'lido_withdrawal_completed';
      network_fee: components['schemas']['NetworkFee'];
      stake_in: components['schemas']['Stake'];
      stake_out: components['schemas']['Stake'];
    };
    Data_RocketPoolStakeCompleted: {
      /** @enum {string} */
      kind: 'rocketpool_stake_completed';
      network_fee: components['schemas']['NetworkFee'];
      stake_in: components['schemas']['Stake'];
      stake_out: components['schemas']['Stake'];
    };
    Data_RocketPoolUnstakeCompleted: {
      /** @enum {string} */
      kind: 'rocketpool_unstake_completed';
      network_fee: components['schemas']['NetworkFee'];
      stake_in: components['schemas']['Stake'];
      stake_out: components['schemas']['Stake'];
    };
    Data_ETHSent: {
      /** @enum {string} */
      kind: 'eth_sent';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      amount: {
        /** Format: decimal */
        usd: string;
        /** Format: decimal */
        eth: string;
      };
    };
    Data_ETHReceived: {
      /** @enum {string} */
      kind: 'eth_received';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      amount: {
        /** Format: decimal */
        usd: string;
        /** Format: decimal */
        eth: string;
      };
    };
    Data_ERC20Sent: {
      /** @enum {string} */
      kind: 'erc20_sent';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      token: components['schemas']['Token'];
    };
    Data_ERC20Received: {
      /** @enum {string} */
      kind: 'erc20_received';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      token: components['schemas']['Token'];
    };
    Data_ERC721Sent: {
      /** @enum {string} */
      kind: 'erc721_sent';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      nft: components['schemas']['NFT'];
    };
    Data_ERC721Received: {
      /** @enum {string} */
      kind: 'erc721_received';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      nft: components['schemas']['NFT'];
    };
    Data_ERC1155Sent: {
      /** @enum {string} */
      kind: 'erc1155_sent';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      nft?: components['schemas']['NFT'];
    };
    Data_ERC1155Received: {
      /** @enum {string} */
      kind: 'erc1155_received';
      network_fee: components['schemas']['NetworkFee'];
      /** Format: address */
      from: string;
      /** Format: address */
      to: string;
      nft?: components['schemas']['NFT'];
    };
    Data_AaveV3HealthFactor: {
      /** @enum {string} */
      kind: 'aave_v3_health_factor';
      /** @example 1 */
      chainId: number;
      /** Format: decimal */
      healthFactor: string;
      /** Format: decimal */
      threshold: string;
    };
    Data_EnsExpiration: {
      /** @enum {string} */
      kind: 'ens_expiration';
      chainId: number;
      reverseEnsName: string;
      /** Format: date-time */
      expirationDateIso: string;
      /** @example 86400 */
      reminderDelayInSeconds: number;
    };
    Data_LidoStakingRewards: {
      /** @enum {string} */
      kind: 'lido_staking_rewards';
      chainId: number;
      /** Format: decimal */
      currentStethBalance: string;
      /** Format: decimal */
      currentEthValue: string;
      /** Format: decimal */
      estimatedTotalRewardInPeriod: string;
      /** @example 1 */
      daysSinceLastNotification: number;
      /** @example 1 */
      notificationIntervalDays: number;
    };
    Data_NotionalLoanExpiration: {
      /** @enum {string} */
      kind: 'notional_loan_expiration';
      chainId: number;
      loans: {
        /** Format: decimal */
        amount: string;
        symbol: string;
        /** Format: date-time */
        maturityDateIso: string;
      }[];
      /** @example 86400 */
      reminderDelayInSeconds: number;
    };
    Data_RocketpoolStakingRewards: {
      /** @enum {string} */
      kind: 'rocketpool_staking_rewards';
      chainId: number;
      /** Format: decimal */
      currentRethBalance: string;
      /** Format: decimal */
      currentEthValue: string;
      /** Format: decimal */
      estimatedTotalRewardInPeriod: string;
      /** @example 1 */
      daysSinceLastNotification: number;
      /** @example 1 */
      notificationIntervalDays: number;
    };
    Data_SparkFiHealthFactor: {
      /** @enum {string} */
      kind: 'spark_fi_health_factor';
      chainId: number;
      /** Format: decimal */
      healthFactor: string;
      /** Format: decimal */
      threshold: string;
    };
    NetworkFee: {
      /** Format: decimal */
      gas_price: string;
      /** Format: decimal */
      native_token_price_in_usd: string;
    };
    Token: {
      /** Format: address */
      address: string;
      symbol: string;
      name: string;
      /** Format: decimal */
      amount: string;
      /** Format: int32 */
      decimals: string;
      /** Format: uri */
      image: string;
      /** Format: decimal */
      usd: string;
    };
    NFT: {
      name: string;
      token_id: string;
      /** Format: uri */
      image: string;
      collection: {
        /** Format: address */
        address: string;
        name: string;
        symbol: string;
        /** Format: uri */
        image: string;
      };
    };
    Stake: {
      /** Format: address */
      address: string;
      symbol: string;
      name: string;
      /** Format: decimal */
      amount: string;
      /** Format: int32 */
      decimals: string;
      /** Format: uri */
      image: string;
      /** Format: decimal */
      usd: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type operations = Record<string, never>;
