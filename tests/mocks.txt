// import { v4 } from 'uuid';

// // Duplicate code here to avoid using `@metamask/keyring-api` and `@metamask/keyring-controller` as dependencies
// export enum KeyringTypes {
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   simple = 'Simple Key Pair',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   hd = 'HD Key Tree',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   qr = 'QR Hardware Wallet Device',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   trezor = 'Trezor Hardware',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   ledger = 'Ledger Hardware',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   lattice = 'Lattice Hardware',
//   // TODO: Either fix this lint violation or explain why it's necessary to ignore.
//   // eslint-disable-next-line @typescript-eslint/naming-convention
//   snap = 'Snap Keyring',
// }

// export const createMockInternalAccount = ({
//   id = v4(),
//   address = '0x2990079bcdee240329a520d2444386fc119da21a',
//   type = ,
//   name = 'Account 1',
//   keyringType = KeyringTypes.hd,
//   snap,
//   importTime = Date.now(),
//   lastSelected = Date.now(),
// }: {
//   id?: string;
//   address?: string;
//   type?: '';
//   name?: string;
//   keyringType?: KeyringTypes;
//   snap?: {
//     id: string;
//     enabled: boolean;
//     name: string;
//   };
//   importTime?: number;
//   lastSelected?: number;
// } = {}): InternalAccount => {
//   let methods;

//   switch (type) {
//     case EthAccountType.Eoa:
//       methods = [
//         EthMethod.PersonalSign,
//         EthMethod.Sign,
//         EthMethod.SignTransaction,
//         EthMethod.SignTypedDataV1,
//         EthMethod.SignTypedDataV3,
//         EthMethod.SignTypedDataV4,
//       ];
//       break;
//     case EthAccountType.Erc4337:
//       methods = [
//         EthMethod.PatchUserOperation,
//         EthMethod.PrepareUserOperation,
//         EthMethod.SignUserOperation,
//       ];
//       break;
//     case BtcAccountType.P2wpkh:
//       methods = [BtcMethod.SendMany];
//       break;
//     default:
//       throw new Error(`Unknown account type: ${type as string}`);
//   }

//   return {
//     id,
//     address,
//     options: {},
//     methods,
//     type,
//     metadata: {
//       name,
//       keyring: { type: keyringType },
//       importTime,
//       lastSelected,
//       snap,
//     },
//   };
// };

console.log(1);
