name: Publish Release

on:
  push:
    branches: [main]

jobs:
  publish-release:
    permissions:
      contents: write
    # release merge commits come from GitHub user
    if: github.event.head_commit.committer.name == 'GitHub'
    outputs:
      IS_RELEASE: ${{ steps.check-release.outputs.IS_RELEASE }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
          # we need this commit + the last so we can compare below
          fetch-depth: 2
      # exit early if the version has not changed
      - name: Check Release
        id: check-release
        run: ./scripts/check-release.sh ${{ github.event.before }}
      - name: Get Node.js version
        if: ${{ steps.check-release.outputs.IS_RELEASE == 'true' }}
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - name: Setup Node
        if: ${{ steps.check-release.outputs.IS_RELEASE == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - uses: MetaMask/action-publish-release@v2.0.0
        if: ${{ steps.check-release.outputs.IS_RELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        if: ${{ steps.check-release.outputs.IS_RELEASE == 'true' }}
        run: |
          yarn install
          yarn build
      - uses: actions/cache@v3
        if: ${{ steps.check-release.outputs.IS_RELEASE == 'true' }}
        id: restore-build
        with:
          path: ./dist
          key: ${{ github.sha }}

  publish-npm-dry-run:
    runs-on: ubuntu-latest
    needs: publish-release
    if: ${{ needs.publish-release.outputs.IS_RELEASE == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./dist
          key: ${{ github.sha }}
        # Set `ignore-scripts` to skip `prepublishOnly` because the release was built already in the previous job
      - run: npm config set ignore-scripts true
      - name: Dry Run Publish
        # omit npm-token token to perform dry run publish
        uses: MetaMask/action-npm-publish@v1.1.0
        env:
          SKIP_PREPACK: true

  publish-npm:
    environment: npm-publish
    runs-on: ubuntu-latest
    needs: publish-npm-dry-run
    if: ${{ needs.publish-release.outputs.IS_RELEASE == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./dist
          key: ${{ github.sha }}
        # Set `ignore-scripts` to skip `prepublishOnly` because the release was built already in the previous job
      - run: npm config set ignore-scripts true
      - name: Publish
        uses: MetaMask/action-npm-publish@v1.1.0
        with:
          npm-token: ${{ secrets.NPM_TOKEN }}
        env:
          SKIP_PREPACK: true
