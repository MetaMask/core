name: SonarCloud Analysis

on:
  workflow_call:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      child-workspace-package-names: ${{ steps.workspace-package-names.outputs.child-workspace-package-names }}
    steps:
      - name: Checkout and setup environment
        uses: MetaMask/action-checkout-and-setup@v1
        with:
          is-high-risk-environment: false
      - name: Fetch workspace package names
        id: workspace-package-names
        run: |
          echo "child-workspace-package-names=$(yarn workspaces list --no-private --json | jq --slurp --raw-output 'map(.name) | @json')" >> "$GITHUB_OUTPUT"
        shell: bash

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        package-name: ${{ fromJson(needs.prepare.outputs.child-workspace-package-names) }}
    steps:
      - name: Checkout and setup environment
        uses: MetaMask/action-checkout-and-setup@v1
        with:
          is-high-risk-environment: false
      - name: Transform package name
        id: transform-package-name
        run: |
          echo "package-folder-name=$(echo ${{ matrix.package-name }} | sed 's/@metamask\///')" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Download coverage reports
        uses: actions/download-artifact@v2
        with:
          name: coverage-${{ matrix.package-name }}-${{ github.event.pull_request.number || github.sha }}
          path: ./packages/${{ steps.transform-package-name.outputs.package-folder-name }}/coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./packages/${{ steps.transform-package-name.outputs.package-folder-name }}
          args: >
            -Dsonar.organization=consensys
            -Dsonar.projectKey=${{ matrix.package-name }}
            -Dsonar.sources=src
            -Dsonar.tests=src,test
            -Dsonar.test.inclusions=**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts
            -Dsonar.coverage.minimum=80 