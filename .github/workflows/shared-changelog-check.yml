name: Shared ChangeLog Check

on:
  workflow_call:
    inputs:
      feature-branch:
        required: true
        type: string
      pr-number:
        required: false
        type: string
      event-type:
        required: true
        type: string
      is-monorepo:
        description: 'Set to true for monorepo projects (only yarn workspaces are supported)'
        required: false
        type: boolean
        default: false
    secrets:
      gh-token:
        required: true

jobs:
  shared_changelog_check:
    runs-on: ubuntu-latest
    steps:
      - name: Conditional Skip or Execute
        run: |
          if [[ "${{ inputs.event-type }}" == "merge_group" ]]; then
            echo "Merge group event detected, auto-succeeding."
            exit 0
          fi
          echo "Proceeding with pull request checks."

      - name: Checkout github-tools repository
        if: ${{ inputs.event-type == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          repository: MetaMask/core
          ref: changelog-checker
          path: github-tools

      - name: Enable Corepack
        if: ${{ inputs.event-type == 'pull_request' }}
        run: corepack enable
        shell: bash

      - name: Set up Node.js
        if: ${{ inputs.event-type == 'pull_request' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ./github-tools/.nvmrc
          cache-dependency-path: ./github-tools/yarn.lock
          cache: yarn

      - name: Install dependencies
        if: ${{ inputs.event-type == 'pull_request' }}
        run: yarn --immutable
        shell: bash
        working-directory: ./github-tools

      - name: Check PR Labels
        if: ${{ inputs.event-type == 'pull_request' }}
        id: label-check
        env:
          GITHUB_TOKEN: ${{ secrets.gh-token }}
          GITHUB_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ inputs.pr-number }}
        run: |
          # Fetch labels from the GitHub API
          if ! labels=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPO}/issues/${PR_NUMBER}/labels"); then
            echo "::error::Failed to fetch labels from GitHub API."
            exit 1
          fi

          # Proceed with checking for the 'no-changelog' label using jq
          if echo "$labels" | jq -e '.[] | select(.name == "no-changelog")'; then
            echo "No-changelog label found, skipping changelog check."
            echo "SKIP_CHANGELOG=true" >> "$GITHUB_ENV"
          else
            echo "SKIP_CHANGELOG=false" >> "$GITHUB_ENV"
            echo "No-changelog label not found, proceeding with changelog check."
          fi
        shell: bash

      - name: Check Changelog
        if: ${{ inputs.event-type == 'pull_request' && env.SKIP_CHANGELOG != 'true' }}
        id: changelog-check
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.gh-token }}
          IS_MONOREPO: ${{ inputs.is-monorepo || 'false' }}
          GITHUB_REPO: ${{ github.repository }}
          HEAD_REF: ${{ github.head_ref }}
          PR_NUMBER: ${{ inputs.pr-number }}
        working-directory: ./github-tools
        run: |
          if [[ "$IS_MONOREPO" == "true" ]]; then
            echo "Running in monorepo mode - checking changelogs for changed packages..."

            # Get all changed files with pagination support
            CHANGED_FILES=""
            PAGE=1
            while true; do
              echo "Fetching changed files (page $PAGE)..."

              if ! PAGE_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/repos/${GITHUB_REPO}/pulls/${PR_NUMBER}/files?page=$PAGE&per_page=100"); then
                echo "::error::Failed to fetch changed files from GitHub API."
                exit 1
              fi

              # Check if the response is a valid JSON array
              if ! echo "$PAGE_RESPONSE" | jq -e 'if type=="array" then true else false end' > /dev/null; then
                echo "::error::Invalid response from GitHub API."
                echo "Response:"
                echo "$PAGE_RESPONSE" | jq '.'
                exit 1
              fi

              PAGE_FILES=$(echo "$PAGE_RESPONSE" | jq -r '.[].filename')
              ITEMS_COUNT=$(echo "$PAGE_RESPONSE" | jq 'length')

              # If no files returned or empty array, we've reached the end of pagination
              if [ -z "$PAGE_FILES" ] || [ "$ITEMS_COUNT" == "0" ]; then
                break
              fi

              # Append files from this page
              if [ -n "$CHANGED_FILES" ]; then
                CHANGED_FILES="$CHANGED_FILES"$'\n'"$PAGE_FILES"
              else
                CHANGED_FILES="$PAGE_FILES"
              fi

              # Break if returned items fewer than per_page (indicating last page)
              if [ "$ITEMS_COUNT" -lt 100 ]; then
                break
              fi

              # Go to next page
              PAGE=$((PAGE+1))
            done

            # Clean up empty lines
            CHANGED_FILES=$(echo "$CHANGED_FILES" | grep -v '^$' || echo "")

            # Check if we got any files after pagination and cleanup - exit early if there are no changed files to process
            if [ -z "$CHANGED_FILES" ]; then
              echo "No changed files found. Exiting successfully."
              exit 0
            fi

            # Debug output
            echo "Files changed in this PR:"
            echo "$CHANGED_FILES"
            echo "Total: $(echo "$CHANGED_FILES" | wc -l) files"

            # Identify changed packages
            declare -a CHANGED_PACKAGES

            # Extract package names from file paths
            while IFS= read -r FILE; do
              # Skip workflow files
              if [[ "$FILE" =~ (^|^\./)\.github/workflows/ ]]; then
                continue
              fi

              # Process files within package directories
              if [[ "$FILE" =~ ^packages/([^/]+)/ ]]; then
                PACKAGE="${BASH_REMATCH[1]}"

                # Skip test files, docs, yaml configs, and changelog files
                if [[ ! "$FILE" =~ \.(test|spec)\. ]] && \
                   [[ ! "$FILE" =~ __tests__/ ]] && \
                   [[ ! "$FILE" =~ ^packages/$PACKAGE/docs/ ]] && \
                   [[ ! "$FILE" =~ ^packages/$PACKAGE/CHANGELOG\.md$ ]]; then

                  # Add package to our tracking array if not already there
                  if [[ ! " ${CHANGED_PACKAGES[*]} " =~ \ ${PACKAGE}\  ]]; then
                    CHANGED_PACKAGES+=("$PACKAGE")
                    echo "Code changes detected in package: $PACKAGE"
                  fi
                fi
              fi
            done <<< "$CHANGED_FILES"

            # Skip if no packages with code changes were found
            if [ ${#CHANGED_PACKAGES[@]} -eq 0 ]; then
              echo "No package code changes detected that would require changelog updates."
              exit 0
            fi

            # Check changelogs for each changed package
            OVERALL_STATUS=0
            for PACKAGE in "${CHANGED_PACKAGES[@]}"; do
              echo "Checking changelog for package: $PACKAGE"
              CHANGELOG_PATH="packages/${PACKAGE}/CHANGELOG.md"

              # Call the existing changelog:check script for each package
              if ! yarn run changelog:check "$GITHUB_REPO" "$HEAD_REF" "$CHANGELOG_PATH"; then
                OVERALL_STATUS=1
                echo "::error::Changelog check failed for package: $PACKAGE"
              fi
            done

            # Exit with the overall status
            exit $OVERALL_STATUS
          else
            echo "Running in single-repo mode - checking changelog for the entire repository..."
            # Original single-repo check
            yarn run changelog:check "$GITHUB_REPO" "$HEAD_REF" "CHANGELOG.md"
          fi
